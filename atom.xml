<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>米达的博客</title>
  
  <subtitle>好好学习</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://liaoooyx.com/"/>
  <updated>2020-05-24T21:59:59.350Z</updated>
  <id>https://liaoooyx.com/</id>
  
  <author>
    <name>liaoooyx</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>梯度消失和梯度爆炸问题解决方案</title>
    <link href="https://liaoooyx.com/2020/05/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%A2%AF%E5%BA%A6%E6%B6%88%E5%A4%B1%E5%92%8C%E6%A2%AF%E5%BA%A6%E7%88%86%E7%82%B8%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>https://liaoooyx.com/2020/05/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%A2%AF%E5%BA%A6%E6%B6%88%E5%A4%B1%E5%92%8C%E6%A2%AF%E5%BA%A6%E7%88%86%E7%82%B8%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</id>
    <published>2020-05-23T23:00:00.000Z</published>
    <updated>2020-05-24T21:59:59.350Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本质上是因为神经网络的更新方法，梯度消失是因为反向传播过程中对梯度的求解会产生sigmoid导数和参数的连乘，sigmoid导数的最大值为0.25，权重一般初始都在0，1之间，乘积小于1，多层的话就会有多个小于1的值连乘，导致靠近输入层的梯度几乎为0，得不到更新。梯度爆炸是也是同样的原因，只是如果初始权重大于1，或者更大一些，多个大于1的值连乘，将会很大或溢出，导致梯度更新过大，模型无法收敛。</p></blockquote><a id="more"></a><h4 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h4><blockquote><ul><li>解决方案一（预训练加微调）</li><li>解决方案二（梯度剪切、正则）</li><li>解决方案三（改变激活函数）</li><li>解决方案四（batchnorm）</li><li>解决方案五（残差结构）</li><li>解决方案六（LSTM）</li></ul><p>——<a href="https://zhuanlan.zhihu.com/p/76772734" target="_blank" rel="noopener">从反向传播推导到梯度消失and爆炸的原因及解决方案（从DNN到RNN，内附详细反向传播公式推导</a>，第四节</p></blockquote><h4 id="梯度爆炸"><a href="#梯度爆炸" class="headerlink" title="梯度爆炸"></a>梯度爆炸</h4><blockquote><p>在深层神经网络或循环神经网络中，误差的梯度可在更新中累积相乘。如果网络层之间的梯度值大于 1.0，那么重复相乘会导致梯度呈指数级增长，梯度变的非常大，然后导致网络权重的大幅更新，并因此使网络变得不稳定。</p><p>信号：</p><ul><li><p>模型不稳定，导致更新过程中的损失出现显著变化；</p></li><li><p>训练过程中，在极端情况下，权重的值变得非常大，以至于溢出，导致模型损失变成 NaN等等。</p></li></ul><p>解决梯度爆炸的其他方法：</p><ol><li>减少学习率（个人理解梯度爆炸是模型训练发散的一种情况）；</li><li>使用ReLU函数，使得梯度稳定；</li><li>使用正则化，即检查网络中权重的大小，对较大的权重进行惩罚，限制了梯度爆炸造成的权重变得很大的情况。</li></ol><p>——[常见损失函数小结](</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本质上是因为神经网络的更新方法，梯度消失是因为反向传播过程中对梯度的求解会产生sigmoid导数和参数的连乘，sigmoid导数的最大值为0.25，权重一般初始都在0，1之间，乘积小于1，多层的话就会有多个小于1的值连乘，导致靠近输入层的梯度几乎为0，得不到更新。梯度爆炸是也是同样的原因，只是如果初始权重大于1，或者更大一些，多个大于1的值连乘，将会很大或溢出，导致梯度更新过大，模型无法收敛。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="人工智能" scheme="https://liaoooyx.com/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
      <category term="笔记" scheme="https://liaoooyx.com/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>摘录各参数对神经网络的影响</title>
    <link href="https://liaoooyx.com/2020/05/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E8%AE%B0%E5%BD%95%E5%90%84%E5%8F%82%E6%95%B0%E5%AF%B9%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E5%BD%B1%E5%93%8D/"/>
    <id>https://liaoooyx.com/2020/05/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E8%AE%B0%E5%BD%95%E5%90%84%E5%8F%82%E6%95%B0%E5%AF%B9%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E5%BD%B1%E5%93%8D/</id>
    <published>2020-05-23T23:00:00.000Z</published>
    <updated>2020-05-24T21:58:26.797Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="神经网络中的常见问题"><a href="#神经网络中的常见问题" class="headerlink" title="神经网络中的常见问题"></a>神经网络中的常见问题</h3><h4 id="梯度爆炸"><a href="#梯度爆炸" class="headerlink" title="梯度爆炸"></a>梯度爆炸</h4><blockquote><p>在深层神经网络或循环神经网络中，误差的梯度可在更新中累积相乘。如果网络层之间的梯度值大于 1.0，那么重复相乘会导致梯度呈指数级增长，梯度变的非常大，然后导致网络权重的大幅更新，并因此使网络变得不稳定。</p><p>信号：</p><ul><li><p>模型不稳定，导致更新过程中的损失出现显著变化；</p></li><li><p>训练过程中，在极端情况下，权重的值变得非常大，以至于溢出，导致模型损失变成 NaN等等。</p></li></ul><p>解决梯度爆炸的其他方法：</p><ol><li>减少学习率（个人理解梯度爆炸是模型训练发散的一种情况）；</li><li>使用ReLU函数，使得梯度稳定；</li><li>使用正则化，即检查网络中权重的大小，对较大的权重进行惩罚，限制了梯度爆炸造成的权重变得很大的情况。</li></ol><p>——<a href="https://zhuanlan.zhihu.com/p/37217242" target="_blank" rel="noopener">常见损失函数小结</a></p></blockquote><h3 id="激活函数"><a href="#激活函数" class="headerlink" title="激活函数"></a>激活函数</h3><blockquote><ol><li><strong>神经网络为什么需要激活函数：</strong>首先数据的分布绝大多数是非线性的，而一般神经网络的计算是线性的，引入激活函数，是在神经网络中引入非线性，强化网络的学习能力。所以激活函数的最大特点就是非线性。</li><li><strong>不同的激活函数，根据其特点，应用也不同。</strong>Sigmoid和tanh的特点是将输出限制在(0,1)和(-1,1)之间，说明Sigmoid和tanh适合做概率值的处理，例如LSTM中的各种门；而ReLU就不行，因为ReLU无最大值限制，可能会出现很大值。同样，根据ReLU的特征，Relu适合用于深层网络的训练，而Sigmoid和tanh则不行，因为它们会出现梯度消失。</li></ol><p>——<a href="https://zhuanlan.zhihu.com/p/73214810" target="_blank" rel="noopener">激活函数总结</a></p></blockquote><h4 id="sigmoid"><a href="#sigmoid" class="headerlink" title="sigmoid"></a>sigmoid</h4><blockquote><p>sigmoid函数作为激活函数本身就存在梯度消失的问题（见缺点3）</p><p>——<a href="https://zhuanlan.zhihu.com/p/37217242" target="_blank" rel="noopener">常见损失函数小结</a></p><p>优缺点：</p><ul><li>优点：平滑、易于求导。</li><li>缺点：<ol><li>激活函数计算量大（在正向传播和反向传播中都包含幂运算和除法）；</li><li>反向传播求误差梯度时，求导涉及除法；</li><li>Sigmoid导数取值范围是[0, 0.25]，由于神经网络反向传播时的“链式反应”，很容易就会出现梯度消失的情况。例如对于一个10层的网络， 根据<img src="https://www.zhihu.com/equation?tex=0.25^{10}\approx0.000000954" alt="[公式]">，第10层的误差相对第一层卷积的参数<img src="https://www.zhihu.com/equation?tex=W_1" alt="[公式]">的梯度将是一个非常小的值，这就是所谓的“梯度消失”。</li><li>Sigmoid的输出不是0均值（即zero-centered）；这会导致后一层的神经元将得到上一层输出的非0均值的信号作为输入，随着网络的加深，会改变数据的原始分布。</li></ol></li></ul><p>——<a href="https://zhuanlan.zhihu.com/p/73214810" target="_blank" rel="noopener">激活函数总结</a></p></blockquote><h4 id="tanh"><a href="#tanh" class="headerlink" title="tanh"></a>tanh</h4><blockquote><p>相比Sigmoid函数</p><ol><li>tanh的输出范围时(-1, 1)，解决了Sigmoid函数的不是zero-centered输出问题；</li><li>幂运算的问题仍然存在；</li><li>tanh导数范围在(0, 1)之间，相比sigmoid的(0, 0.25)，梯度消失（gradient vanishing）问题会得到缓解，但仍然还会存在。</li></ol><p>——<a href="https://zhuanlan.zhihu.com/p/73214810" target="_blank" rel="noopener">激活函数总结</a></p></blockquote><h4 id="ReLU"><a href="#ReLU" class="headerlink" title="ReLU"></a>ReLU</h4><p><strong>特点</strong></p><blockquote><p>ReLU的有效导数是常数1，解决了深层网络中出现的梯度消失问题，也就使得深层网络可训练。<strong>同时ReLU又是非线性函数，所谓非线性，就是一阶导数不为常数；对ReLU求导，在输入值分别为正和为负的情况下，导数是不同的，即ReLU的导数不是常数，所以ReLU是非线性的（只是不同于Sigmoid和tanh，relu的非线性不是光滑的）。</strong></p><p>——<a href="https://zhuanlan.zhihu.com/p/73214810" target="_blank" rel="noopener">激活函数总结</a></p><p>relu函数的导数在正数部分是恒等于1的，因此在深层网络中使用relu激活函数就不会导致梯度消失和爆炸的问题。</p><p><strong>relu</strong>的主要贡献在于：</p><ul><li>解决了梯度消失、爆炸的问题</li><li>计算方便，计算速度快</li><li>加速了网络的训练</li></ul><p>同时也存在一些<strong>缺点</strong>：</p><ul><li>由于负数部分恒为0，会导致一些神经元无法激活（可通过设置小学习率部分解决）</li><li>输出不是以0为中心的</li></ul><p>——<a href="https://zhuanlan.zhihu.com/p/76772734" target="_blank" rel="noopener">从反向传播推导到梯度消失and爆炸的原因及解决方案（从DNN到RNN，内附详细反向传播公式推导）</a></p></blockquote><p><strong>ReLU函数相对于tanh和sigmoid函数好在哪里：</strong></p><blockquote><p>采用sigmoid等函数，算激活函数是（指数运算），计算量大；反向传播求误差梯度时，求导涉及除法，计算量相对大。而采用Relu激活函数，整个过程的计算量节省很多。</p><p>对于深层网络，sigmoid函数反向传播时，很容易就会出现梯度消失的情况（在sigmoid接近饱和区时，变换太缓慢，导数趋于0），这种情况会造成信息丢失，梯度消失在网络层数多的时候尤其明显，从而无法完成深层网络的训练。</p><p>ReLU会使一部分神经元的输出为0，这样就造成了网络的稀疏性，并且减少了参数的相互依存关系，缓解了过拟合问题的发生。</p><p>——<a href="https://zhuanlan.zhihu.com/p/37217242" target="_blank" rel="noopener">常见损失函数小结</a></p><p>相比Sigmoid和tanh，ReLU摒弃了复杂的计算，提高了运算速度。</p><p>解决了梯度消失问题，收敛速度快于Sigmoid和tanh函数，但要<strong>防范ReLU的梯度爆炸</strong></p><p>容易得到更好的模型，但也要<strong>防止训练中出现模型【Dead】情况</strong>。</p><p>——<a href="https://zhuanlan.zhihu.com/p/73214810" target="_blank" rel="noopener">激活函数总结</a></p></blockquote><p><strong>在使用relu的网络中，是否还存在梯度消失的问题？</strong></p><blockquote><p>梯度衰减的原因包括：激活函数导数，此外，还有多个权重连乘也会影响。梯度消失只是表面说法，按照这样理解，底层使用非常大的学习率，或者人工添加梯度噪音，原则上也能回避，有不少论文这样试了，然而目前来看，有用，但没太大的用处。深层原因训练不好的本质难题可能不是衰减或者消失（残差网络论文也提到这一点），是啥目前数理派也搞不清楚，所以写了论文也顺势这样说开了。不然，贸贸然将开山鼻祖的观点否定了，是需要极大勇气和大量的实验，以及中二精神的。</p><p>—— <a href="https://www.zhihu.com/question/49230360/answer/114914080" target="_blank" rel="noopener">知乎问题</a>，回答 <a href="https://www.zhihu.com/people/lykquitphy" target="_blank" rel="noopener">纳米酱</a></p></blockquote><h4 id="Leaky-ReLU-PReLU（Parametric-Relu）-RReLU（Random-ReLU）"><a href="#Leaky-ReLU-PReLU（Parametric-Relu）-RReLU（Random-ReLU）" class="headerlink" title="Leaky ReLU, PReLU（Parametric Relu）, RReLU（Random ReLU）"></a>Leaky ReLU, PReLU（Parametric Relu）, RReLU（Random ReLU）</h4><blockquote><p>为了防止模型的【Dead】情况，后人将x&lt;0部分并没有直接置为0，而是给了一个很小的负数梯度值</p><p><strong>Leaky ReLU</strong>中的<img src="https://www.zhihu.com/equation?tex=\alpha" alt="[公式]">为常数，一般设置 0.01。这个函数通常比 Relu 激活函数效果要好，但是效果不是很稳定，所以在实际中 Leaky ReLu 使用的并不多。</p><p><strong>PRelu（参数化修正线性单元）</strong> 中的<img src="https://www.zhihu.com/equation?tex=\alpha+" alt="[公式]">作为一个可学习的参数，会在训练的过程中进行更新。</p><p><strong>RReLU（随机纠正线性单元）</strong>也是Leaky ReLU的一个变体。在RReLU中，负值的斜率在训练中是随机的，在之后的测试中就变成了固定的了。RReLU的亮点在于，在训练环节中，aji是从一个均匀的分布U(I,u)中随机抽取的数值。</p><p>——<a href="https://zhuanlan.zhihu.com/p/73214810" target="_blank" rel="noopener">激活函数总结</a></p></blockquote><h3 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h3><blockquote><p>损失函数是网络学习的指挥棒，它引导着网络学习的方向——能让损失函数变小的参数就是好参数。所以，损失函数的选择和设计要能表达你希望模型具有的性质与倾向。——<a href="https://me.csdn.net/firelx" target="_blank" rel="noopener">shine-lee</a>（<a href="https://blog.csdn.net/blogshinelee/article/details/103518097" target="_blank" rel="noopener">原文</a>）</p></blockquote><h4 id="交叉熵损失"><a href="#交叉熵损失" class="headerlink" title="交叉熵损失"></a>交叉熵损失</h4><p>（Pytorch）CrossEntropyLoss本身已经包含了softmax，在神经网络中使用CrossEntropyLoss作为损失函数时，不需要再添加softmax。（以下文章有提及：<a href="https://blog.csdn.net/zhufenghao/article/details/52735750" target="_blank" rel="noopener">1</a>，<a href="https://blog.csdn.net/haiyuanboy/article/details/90377817" target="_blank" rel="noopener">2</a>）</p><blockquote><p><a href="https://zhuanlan.zhihu.com/p/95386061" target="_blank" rel="noopener">交叉熵损失</a>：扩大低概率高损失、高概率低损失的差距，同样使得损失函数对网络输出“更敏感”，更有利于分类。</p><p>——<a href="https://zhuanlan.zhihu.com/p/37217242" target="_blank" rel="noopener">常见损失函数小结</a></p></blockquote><h4 id="交叉熵与均方误差损失函数对比"><a href="#交叉熵与均方误差损失函数对比" class="headerlink" title="交叉熵与均方误差损失函数对比"></a>交叉熵与均方误差损失函数对比</h4><p>交叉熵只看重正确分类的结果，而均方差对每个输出结果都看重。</p><blockquote><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gf3bno6qd9j31hs0ju794.jpg" alt="截屏2020-05-24 上午3.17.13"></p><p>——<a href="https://blog.csdn.net/blogshinelee/article/details/103518097" target="_blank" rel="noopener">直观理解为什么分类问题用交叉熵损失而不用均方误差损失?</a></p><p><strong>交叉熵的损失函数只和分类正确的预测结果有关系，而MSE的损失函数还和错误的分类有关系，该分类函数除了让正确的分类尽量变大，还会让错误的分类变得平均，但实际在分类问题中这个调整是没有必要的。但是对于回归问题来说，这样的考虑就显得很重要了。所以，回归问题熵使用交叉上并不合适。</strong><br>——<a href="https://blog.csdn.net/weixin_41888969/article/details/89450163" target="_blank" rel="noopener">为什么均方差（MSE）不适合分类问题？交叉熵（cross-entropy）不适合回归问题？</a></p><ol><li>神经网络中如果预测值与实际值的误差越大，那么在反向传播训练的过程中，各种参数调整的幅度就要更大，从而使训练更快收敛，如果预测值与实际值的误差小，各种参数调整的幅度就要小，从而减少震荡。</li><li><strong>使用均方误差损失函数，误差增大参数的梯度会增大（梯度大，告诉权重要向这个方向更新），但是当误差很大时，参数的梯度就会又减小了（权重又不往这个方向更新了，这不合理）。</strong></li><li>使用交叉熵损失函数，误差越大参数的梯度也越大，能够快速收敛。</li></ol><p>——<a href="https://blog.csdn.net/liuweiyuxiang/article/details/90707375" target="_blank" rel="noopener">分类问题为什么要使用交叉熵损失函数而不是均方误差</a></p></blockquote><h3 id="激活函数-损失函数"><a href="#激活函数-损失函数" class="headerlink" title="激活函数+损失函数"></a>激活函数+损失函数</h3><blockquote><p>MSE均方误差+Sigmoid激活函数使得神经网络反向传播的起始位置——输出层神经元学习率缓慢。</p><p>交叉熵损失+Sigmoid激活函数可以解决输出层神经元学习率缓慢的问题，但是不能解决隐藏层神经元学习率缓慢的问题。</p><ul><li><p>改变激活函数或损失函数有可能解决该问题：</p><p>激活函数：将sigmoid函数，改为不会造成梯度消失的函数，例如：ReLU函数，不仅能解决输出层学习率缓慢，还能解决隐藏层学习率缓慢问题。</p><p>损失函数：将均方误差损失，改为交叉熵损失（<a href="https://blog.csdn.net/blogshinelee/article/details/103518097" target="_blank" rel="noopener">直观理解为什么分类问题用交叉熵损失而不用均方误差损失?</a>）</p></li></ul><p>——<a href="https://zhuanlan.zhihu.com/p/37217242" target="_blank" rel="noopener">常见损失函数小结</a></p><p>只要激活函数是sigmoid，tanh类似的曲线，不适合使用MSE，需要搭配交叉熵损失函数。</p><p>对于MSE，随着误差的增大，权值需要调整的幅度先变大后变小，这就导致当误差很大时，模型显得“自暴自弃”不肯学习</p><p>——<a href="https://zhuanlan.zhihu.com/p/63731947" target="_blank" rel="noopener">为什么使用交叉熵作为损失函数</a>，评论</p></blockquote><h3 id="优化器-Optimizer"><a href="#优化器-Optimizer" class="headerlink" title="优化器 Optimizer"></a>优化器 Optimizer</h3><h4 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h4><blockquote><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gf43xiyod1g30h80dc4n1.gif" alt="img" style="zoom: 50%;" /></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gf43xmkc6bg30h80dc1ca.gif" alt="img" style="zoom:50%;" /></p><p>——<a href="https://cs231n.github.io/neural-networks-3/" target="_blank" rel="noopener">Convolutional Neural Networks for Visual Recognition</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;神经网络中的常见问题&quot;&gt;&lt;a href=&quot;#神经网络中的常见问题&quot; class=&quot;headerlink&quot; title=&quot;神经网络中的常见问题&quot;&gt;&lt;/a&gt;神经网络中的常见问题&lt;/h3&gt;&lt;h4 id=&quot;梯度爆炸&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
    
      <category term="人工智能" scheme="https://liaoooyx.com/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
      <category term="笔记" scheme="https://liaoooyx.com/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>关于VGG网络的文章链接</title>
    <link href="https://liaoooyx.com/2020/05/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E4%BB%8B%E7%BB%8DVGG%E7%BD%91%E7%BB%9C%E7%9A%84%E6%96%87%E7%AB%A0%E9%93%BE%E6%8E%A5/"/>
    <id>https://liaoooyx.com/2020/05/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E4%BB%8B%E7%BB%8DVGG%E7%BD%91%E7%BB%9C%E7%9A%84%E6%96%87%E7%AB%A0%E9%93%BE%E6%8E%A5/</id>
    <published>2020-05-22T23:00:00.000Z</published>
    <updated>2020-05-24T21:58:56.112Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://zhuanlan.zhihu.com/p/41423739" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/41423739</a></p><blockquote><p><a href="https://link.zhihu.com/?target=https%3A//arxiv.org/abs/1409.1556">VGG</a>是Oxford的<strong>V</strong>isual <strong>G</strong>eometry <strong>G</strong>roup的组提出的（大家应该能看出VGG名字的由来了）。该网络是在ILSVRC 2014上的相关工作，主要工作是证明了增加网络的深度能够在一定程度上影响网络最终的性能。VGG有两种结构，分别是VGG16和VGG19，两者并没有本质上的区别，只是网络深度不一样。</p></blockquote><p>我的理解是，根据【感受野】的思想，将一些现有的神经网络改为更深层的神经网络</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/41423739&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/41423739&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//arxiv.org/abs/1409.1556&quot;&gt;VGG&lt;/a&gt;是Oxford的&lt;strong&gt;V&lt;/strong&gt;isual &lt;strong&gt;G&lt;/strong&gt;eometry &lt;strong&gt;G&lt;/strong&gt;roup的组提出的（大家应该能看出VGG名字的由来了）。该网络是在ILSVRC 2014上的相关工作，主要工作是证明了增加网络的深度能够在一定程度上影响网络最终的性能。VGG有两种结构，分别是VGG16和VGG19，两者并没有本质上的区别，只是网络深度不一样。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我的理解是，根据【感受野】的思想，将一些现有的神经网络改为更深层的神经网络&lt;/p&gt;
    
    </summary>
    
    
      <category term="人工智能" scheme="https://liaoooyx.com/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
      <category term="笔记" scheme="https://liaoooyx.com/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="VGG" scheme="https://liaoooyx.com/tags/VGG/"/>
    
      <category term="感受野" scheme="https://liaoooyx.com/tags/%E6%84%9F%E5%8F%97%E9%87%8E/"/>
    
  </entry>
  
  <entry>
    <title>是否有能够自动调整神经网络参数的方法？</title>
    <link href="https://liaoooyx.com/2020/05/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%98%AF%E5%90%A6%E6%9C%89%E8%83%BD%E5%A4%9F%E8%87%AA%E5%8A%A8%E8%B0%83%E6%95%B4%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%8F%82%E6%95%B0%E7%9A%84%E6%96%B9%E6%B3%95%EF%BC%9F/"/>
    <id>https://liaoooyx.com/2020/05/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%98%AF%E5%90%A6%E6%9C%89%E8%83%BD%E5%A4%9F%E8%87%AA%E5%8A%A8%E8%B0%83%E6%95%B4%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%8F%82%E6%95%B0%E7%9A%84%E6%96%B9%E6%B3%95%EF%BC%9F/</id>
    <published>2020-05-19T23:00:00.000Z</published>
    <updated>2020-05-24T21:59:53.630Z</updated>
    
    <content type="html"><![CDATA[<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>Is there any method or technique can help us to infer the parameters of a CNN model automatically in a reasonable way rather than tedious experiments? Such as the parameters 4096 and 512 in the screenshot.</p><a id="more"></a><h4 id="回答"><a href="#回答" class="headerlink" title="回答"></a>回答</h4><p>Unfortunately there’s no real way to know what the optimal architecture for a neural network is. Some researchers have suggested methods such as reinforcement learning (<a href="https://openreview.net/forum?id=r1Ue8Hcxg&amp;noteId=r1Ue8Hcxg" target="_blank" rel="noopener">https://openreview.net/forum?id=r1Ue8Hcxg&amp;noteId=r1Ue8Hcxg</a>) or genetic algorithms (<a href="https://ieeexplore.ieee.org/abstract/document/7731699?casa_token=M5491lfwA_AAAAAA:5pnyD5x1Bu8hbj3Tqj_Tu4AK3ruCDp4Q2DjBtRqVJAIPjDim38bY3KkAJQZYNK8gVlOnhUnJ" target="_blank" rel="noopener">https://ieeexplore.ieee.org/abstract/document/7731699?casa_token=M5491lfwA_AAAAAA:5pnyD5x1Bu8hbj3Tqj_Tu4AK3ruCDp4Q2DjBtRqVJAIPjDim38bY3KkAJQZYNK8gVlOnhUnJ</a>) to experimentally evolve the network architecture and find the best one. In CW1 we got a feel for how changing network configurations can affect the performance; but in reality, our experiments with each component isolated aren’t a route to finding the optimal architecture, because it’s difficult to tune each parameter in isolation. Varying one affects what is optimal for all the rest.</p><p>In practice, most people don’t spend too much time tuning. Rather, they first pick a few network architectures which have worked well on a similar dataset or on a similar task, and they train and compare. They might then choose to fine-tune the best-performing network with a few variations on things like dropout, activation function, etc. </p><h4 id="关于遗传算法"><a href="#关于遗传算法" class="headerlink" title="关于遗传算法"></a>关于遗传算法</h4><blockquote><p>作者：番茄鸡蛋炒饭被抢注啦<br>链接：<a href="https://www.jianshu.com/p/ae5157c26af9" target="_blank" rel="noopener">https://www.jianshu.com/p/ae5157c26af9</a></p><p>既然我们把函数曲线理解成一个一个山峰和山谷组成的山脉。那么我们可以设想所得到的每一个解就是一只袋鼠，我们希望它们不断的向着更高处跳去，直到跳到最高的山峰。<strong>所以求最大值的过程就转化成一个“袋鼠跳”的过程。</strong></p><p>下面介绍介绍“袋鼠跳”的几种方式。</p><ul><li>爬山算法：一只袋鼠朝着比现在高的地方跳去。它找到了不远处的最高的山峰。但是这座山不一定是最高峰。这就是爬山算法，它不能保证局部最优值就是全局最优值。</li><li>模拟退火：袋鼠喝醉了。它随机地跳了很长时间。这期间，它可能走向高处，也可能踏入平地。但是，它渐渐清醒了并朝最高峰跳去。这就是模拟退火算法。</li><li>遗传算法：有很多袋鼠，它们降落到喜玛拉雅山脉的任意地方。这些袋鼠并不知道它们的任务是寻找珠穆朗玛峰。但每过几年，就在一些海拔高度较低的地方射杀一些袋鼠。于是，不断有袋鼠死于海拔较低的地方，而越是在海拔高的袋鼠越是能活得更久，也越有机会生儿育女。就这样经过许多年，这些袋鼠们竟然都不自觉地聚拢到了一个个的山峰上，可是在所有的袋鼠中，只有聚拢到珠穆朗玛峰的袋鼠被带回了美丽的澳洲。</li></ul><p>遗传算法并不保证你能获得问题的最优解，但是使用遗传算法的最大优点在于你不必去了解和操心如何去“找”最优解。（你不必去指导袋鼠向那边跳，跳多远。）而只要简单的“否定”一些表现不好的个体就行了。（把那些总是爱走下坡路的袋鼠射杀，这就是遗传算法的精粹！）</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h4&gt;&lt;p&gt;Is there any method or technique can help us to infer the parameters of a CNN model automatically in a reasonable way rather than tedious experiments? Such as the parameters 4096 and 512 in the screenshot.&lt;/p&gt;
    
    </summary>
    
    
      <category term="人工智能" scheme="https://liaoooyx.com/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
      <category term="笔记" scheme="https://liaoooyx.com/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="遗传算法" scheme="https://liaoooyx.com/tags/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95/"/>
    
      <category term="强化学习" scheme="https://liaoooyx.com/tags/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>将人工智能用户数据分析 AIDI Artificial Intelligence for Data Analytics</title>
    <link href="https://liaoooyx.com/2020/05/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E8%AE%B2%E5%BA%A7%EF%BC%9A%E5%B0%86%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E7%94%A8%E6%88%B7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90-AIDI-Artificial-Intelligence-for-Data-Analytics/"/>
    <id>https://liaoooyx.com/2020/05/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E8%AE%B2%E5%BA%A7%EF%BC%9A%E5%B0%86%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E7%94%A8%E6%88%B7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90-AIDI-Artificial-Intelligence-for-Data-Analytics/</id>
    <published>2020-05-14T23:00:00.000Z</published>
    <updated>2020-05-24T21:58:49.851Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h4 id="CRISP-DM方法学"><a href="#CRISP-DM方法学" class="headerlink" title="CRISP-DM方法学"></a>CRISP-DM方法学</h4><h4 id="数据工程挑战"><a href="#数据工程挑战" class="headerlink" title="数据工程挑战"></a>数据工程挑战</h4><p>数据组织</p><ul><li>数据解析——cleverCSV</li><li>获取或推断数据字典——ptype，colnet</li><li>数据整合——datadiff</li><li>数据转换 </li></ul><p>数据质量</p><ul><li>Cannoicalization</li><li>缺失数据——HI-VAE</li><li>异常检测和诊断——RVAE</li><li>数据不稳定 non-stationarity——CP Evalution</li></ul><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>机器学习、语义技术、编程语言</p><h4 id="AI-Assistance"><a href="#AI-Assistance" class="headerlink" title="AI Assistance"></a>AI Assistance</h4><ul><li>基于AI的算法</li><li>确保可重复生产和透明性</li></ul><h4 id="数据工程相关的工作"><a href="#数据工程相关的工作" class="headerlink" title="数据工程相关的工作"></a>数据工程相关的工作</h4><ul><li>数据库</li><li>数据挖掘，比如 anomaly detection (Emmott et al, 2013)</li><li>编程语言</li><li>统计学</li></ul><h3 id="datadiff"><a href="#datadiff" class="headerlink" title="datadiff"></a>datadiff</h3><ul><li>数据的格式可能每年都在变化<ul><li>swap, delete, insert columns</li></ul></li><li>Hungarian 算法</li></ul><h3 id="异常检测——RVAE"><a href="#异常检测——RVAE" class="headerlink" title="异常检测——RVAE"></a>异常检测——RVAE</h3><p>真实数据通常伴随着异常数据outliers anomalies</p><h4 id="Variational-Autoencoder-VAE"><a href="#Variational-Autoencoder-VAE" class="headerlink" title="Variational Autoencoder, VAE"></a>Variational Autoencoder, VAE</h4><p>VAE被用于异常点检测 (An &amp; Cho, 2015; Wang et al, 2017)</p><p>可以拟合异常点，但也会对导致对异常点过度拟合，</p><h4 id="Robust-VAE-RVAE"><a href="#Robust-VAE-RVAE" class="headerlink" title="Robust VAE, RVAE"></a>Robust VAE, RVAE</h4><p>异常点注入 outlier injection process</p><h3 id="ptype"><a href="#ptype" class="headerlink" title="ptype"></a>ptype</h3><p>Ceritli, Williams and Geddes (2020)</p><p>评估方法：accuracy and jaccard index</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1getd66infhj30kv08b0uw.jpg" alt="截屏2020-05-15 下午12.34.17"></p><h4 id="trifacta"><a href="#trifacta" class="headerlink" title="trifacta"></a>trifacta</h4><p>基于正则表达式和验证公式</p><h3 id="ColNet"><a href="#ColNet" class="headerlink" title="ColNet"></a>ColNet</h3><p>Chen, Jimenz-Ruiz, Horrocks, Sutton (2019)</p><p>预测数据列的语义类型</p><h3 id="CleverCSV"><a href="#CleverCSV" class="headerlink" title="CleverCSV"></a>CleverCSV</h3><p>van den Burg, Nazabal, Sutton (2019)</p><p>CleverCSV通过改进对杂乱CSV文件的方言检测功能，为Python csv软件包提供了直接替代。它还提供了一个方便的命令行工具，该工具可以标准化凌乱的文件或生成Python代码以将其导入。</p><h4 id="Wrattler"><a href="#Wrattler" class="headerlink" title="Wrattler"></a>Wrattler</h4><p>Petricek, Geddes andd Sutton (2018)</p><p>常见的notebook问题</p><ul><li>有限的可重用性</li><li>没有状态回滚</li><li>有限的交互</li><li>每个核用于单语言</li></ul><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><p>Tundra Traits (Bjorkman et al, Nature 2018)</p><p>Household Electricity Survey</p><p>CleanEHR: Electronic Health Records</p><p>Ofcom Broadband</p><h4 id=""><a href="#" class="headerlink" title=" "></a> </h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h4 id=&quot;CRISP-DM方法学&quot;&gt;&lt;a href=&quot;#CRISP-DM方法学&quot; class=&quot;headerlink&quot; title=&quot;CRISP-DM方法学&quot;&gt;&lt;/a&gt;CRISP-DM方法学&lt;/h4&gt;&lt;h4 id=&quot;数据工程挑战&quot;&gt;&lt;a 
      
    
    </summary>
    
    
      <category term="人工智能" scheme="https://liaoooyx.com/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
      <category term="讲座" scheme="https://liaoooyx.com/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E8%AE%B2%E5%BA%A7/"/>
    
    
  </entry>
  
  <entry>
    <title>搜索引擎的关键词匹配方案</title>
    <link href="https://liaoooyx.com/2020/05/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E5%92%8C%E6%96%87%E6%9C%AC%E5%88%86%E6%9E%90/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E7%9A%84%E4%B8%89%E7%A7%8D%E5%85%B3%E9%94%AE%E8%AF%8D%E5%8C%B9%E9%85%8D%E6%96%B9%E6%A1%88/"/>
    <id>https://liaoooyx.com/2020/05/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E5%92%8C%E6%96%87%E6%9C%AC%E5%88%86%E6%9E%90/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E7%9A%84%E4%B8%89%E7%A7%8D%E5%85%B3%E9%94%AE%E8%AF%8D%E5%8C%B9%E9%85%8D%E6%96%B9%E6%A1%88/</id>
    <published>2020-05-08T23:00:00.000Z</published>
    <updated>2020-05-24T22:06:27.770Z</updated>
    
    <content type="html"><![CDATA[<h4 id="搜索引擎的关键词匹配方案"><a href="#搜索引擎的关键词匹配方案" class="headerlink" title="搜索引擎的关键词匹配方案"></a>搜索引擎的关键词匹配方案</h4><p>方法一：【词嵌入技术】</p><p>方法二：计算相似度</p><ul><li>【词袋】包含1000个基础单词</li><li>任何一个单词都匹配能用一个1000维的向量表示</li><li>任何一个文档，都能用每个单词所表示的向量相加</li><li>文档之间（或文档和查询词之间）的相似度可以通过计算两个向量的距离。</li></ul><p>方法三：【倒排索引】</p><ul><li>具体介绍请转至，博客标题：信息检索（谷歌搜索）</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;搜索引擎的关键词匹配方案&quot;&gt;&lt;a href=&quot;#搜索引擎的关键词匹配方案&quot; class=&quot;headerlink&quot; title=&quot;搜索引擎的关键词匹配方案&quot;&gt;&lt;/a&gt;搜索引擎的关键词匹配方案&lt;/h4&gt;&lt;p&gt;方法一：【词嵌入技术】&lt;/p&gt;
&lt;p&gt;方法二：计算相似度&lt;/
      
    
    </summary>
    
    
      <category term="数据挖掘与文本分析" scheme="https://liaoooyx.com/categories/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E4%B8%8E%E6%96%87%E6%9C%AC%E5%88%86%E6%9E%90/"/>
    
      <category term="课件" scheme="https://liaoooyx.com/categories/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E4%B8%8E%E6%96%87%E6%9C%AC%E5%88%86%E6%9E%90/%E8%AF%BE%E4%BB%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>软件度量 Metrics Used in Software Measurement</title>
    <link href="https://liaoooyx.com/2020/05/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E5%BA%A6%E9%87%8F/"/>
    <id>https://liaoooyx.com/2020/05/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E5%BA%A6%E9%87%8F/</id>
    <published>2020-05-02T23:00:00.000Z</published>
    <updated>2020-05-24T22:07:21.002Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>注意，任何一种软件度量都是有缺陷的</p><blockquote><p>Every software metric is flawed if you blindly take it to its extreme.</p></blockquote><h4 id="软件度量的作用"><a href="#软件度量的作用" class="headerlink" title="软件度量的作用"></a>软件度量的作用</h4><ul><li>帮助开发者管理软件开发进度，比如预估开发时间、评估软件质量是否足以交付</li><li>通过定义和测量软件的属性，来更好的理解软件（软件工程）</li></ul><blockquote><p>Software Metrics: A Rigorous &amp; Practical Approach, Second Edition. Bieman, James M.IBM Systems Journal; Armonk Vol. 36, Iss. 4,  (1997): 594-595.</p></blockquote><h4 id="架构度量的作用"><a href="#架构度量的作用" class="headerlink" title="架构度量的作用"></a>架构度量的作用</h4><p>软件架构能在开始具体开发工作之前，帮助我们确定软件的骨架，就好像建房子一样。而<strong>架构度量</strong>则是帮助我们量化软件架构的一些基本属性，以检查好坏（但还需要发现属性与好坏直接的关系，这需要学者研究或者开发经验）。</p><blockquote><p>Coulin T, Detante M, Mouchère W, et al. Software Architecture Metrics: a literature review[J]. arXiv preprint arXiv:1901.09050, 2019.</p></blockquote><h4 id="2个问题"><a href="#2个问题" class="headerlink" title="2个问题"></a>2个问题</h4><ul><li>哪些架构度量可以帮助设计者评估软件架构</li><li>这些架构度量在什么程度上表示了架构的质量</li></ul><h4 id="架构质量的5个方面"><a href="#架构质量的5个方面" class="headerlink" title="架构质量的5个方面"></a>架构质量的5个方面</h4><ul><li>Maintainability 可维护性</li><li>Performance 性能</li><li>Extensibility 可扩展性</li><li>Simplicity and Understandability 简单性+可理解性</li><li>Re-usability 可重用性</li></ul><h4 id="架构度量的4个方面"><a href="#架构度量的4个方面" class="headerlink" title="架构度量的4个方面"></a>架构度量的4个方面</h4><ul><li>Coupling 耦合</li><li>Cohesion 内聚</li><li>Complexity 复杂性</li><li>Size 大小</li></ul><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p>至2011年为止，共20种度量方式：<a href="https://maisqual.squoring.com/wiki/index.php/Category:Metrics" target="_blank" rel="noopener">https://maisqual.squoring.com/wiki/index.php/Category:Metrics</a> (<a href="https://maisqual.squoring.com/wiki/index.php/Maisqual_Metrics" target="_blank" rel="noopener">Maisqual Metrics set</a>)</p><p>软件架构度量（文献综述）：Coulin T, Detante M, Mouchère W, et al. Software Architecture Metrics: a literature review[J]. arXiv preprint arXiv:1901.09050, 2019.</p><p>Eclipse度量插件中使用的度量方法：<a href="http://eclipse-metrics.sourceforge.net/example/index.html" target="_blank" rel="noopener">http://eclipse-metrics.sourceforge.net/example/index.html</a></p><h2 id="架构度量"><a href="#架构度量" class="headerlink" title="架构度量"></a>架构度量</h2><h3 id="S-R-Chidamber-and-C-F-Kemerer-“A-metrics-suite-for-object-oriented-design-”-in-IEEE-Transactions-on-Software-Engineering-vol-20-no-6-pp-476-493-June-1994"><a href="#S-R-Chidamber-and-C-F-Kemerer-“A-metrics-suite-for-object-oriented-design-”-in-IEEE-Transactions-on-Software-Engineering-vol-20-no-6-pp-476-493-June-1994" class="headerlink" title="S. R. Chidamber and C. F. Kemerer, “A metrics suite for object oriented design,” in IEEE Transactions on Software Engineering, vol. 20, no. 6, pp. 476-493, June 1994."></a>S. R. Chidamber and C. F. Kemerer, “A metrics suite for object oriented design,” in IEEE Transactions on Software Engineering, vol. 20, no. 6, pp. 476-493, June 1994.</h3><h4 id="Weighted-Methods-Per-Class-WMC"><a href="#Weighted-Methods-Per-Class-WMC" class="headerlink" title="Weighted Methods Per Class (WMC)"></a>Weighted Methods Per Class (WMC)</h4><p>计算方式：一个类中所有方法的复杂度之和，如果所有方法的复杂度相同，则为方法数量之和</p><p>Theoretical Basis: WMC relates directly to Bunge’s definition of complexity of a thing, since methods are properties of object classes and complexity is determined by the cardinality of its set of properties. The number of methods is, therefore, a measure of class definition as well as being attributes of a class, since attributes correspond to properties.</p><p>Viewpoints:</p><ul><li>1) The number of methods and the complexity of methods involved is a predictor of how much time and effort is required to develop and maintain the class.</li><li>2) The larger the number of methods in a class the greater the potential impact on children, since children will inherit all the methods defined in the class.</li><li>3) Classes with large numbers of methods are likely to be more application specific, limiting the possibility of reuse.</li></ul><h4 id="Depth-of-Inheritance-Tree-DIT"><a href="#Depth-of-Inheritance-Tree-DIT" class="headerlink" title="Depth of Inheritance Tree (DIT)"></a>Depth of Inheritance Tree (DIT)</h4><p>计算方式：继承树中的最大长度（深度）</p><p>Definition: Depth of inheritance of the class is the DIT metric for the class. In cases involving multiple inheritance, the DIT will be the maximum length from the node to the root of the tree.</p><p>Theoretical Basis: DIT relates to Bunge’s notion of the scope of properties. DIT is a measure of how many ancestor classes can potentially affect this class.</p><p>Viewpoints:</p><ul><li><p>The deeper a class is in the hierarchy, the greater the number of methods it is likely to inherit, making it more complex to predict its behavior.</p></li><li><p>Deeper trees constitute greater design complexity, since more methods and classes are involved.</p></li><li><p>The deeper a particular class is in the hierarchy, the greater the potential reuse of inherited methods.</p></li></ul><h4 id="Number-of-Children-NOC"><a href="#Number-of-Children-NOC" class="headerlink" title="Number of Children(NOC)"></a>Number of Children(NOC)</h4><p>计算方式：一个类的直接子类的数量</p><p>Definition: NOC = number of immediate subclasses subordinated to a class in the class hierarchy.</p><p>Theoretical Basis: NOC relates to the notion of scope of properties. It is a measure of how many subclasses are going to inherit the methods of the parent class.</p><p>Viewpoints:</p><ul><li>1) Greater the number of children, greater the reuse, since inheritance is a form of reuse.</li><li><strong><em>2)\</em></strong> Greater the number of children, the greater the likelihood of improper abstraction of the parent class. If a class has a large number of children, it may be a case of misuse of subclassing.</li><li>3) The number of children gives an idea of the potential influence a class has on the design. If a class has a large number of children, it may require more testing of the methods in that class.</li></ul><h4 id="Coupling-between-object-classes-CBO"><a href="#Coupling-between-object-classes-CBO" class="headerlink" title="Coupling between object classes (CBO)"></a>Coupling between object classes (CBO)</h4><p>计算方式：一个类与其他类耦合的数量。依赖和被依赖都属于耦合，但计算方式是按类计算的，即使两个类相互依赖也只是各计一次。</p><p>Definition: CBO for a class is a count of the number of other classes to which it is coupled.</p><p>Theoretical Basis: CBO relates to the notion that an object is coupled to another object if one of them acts on the other, i.e., methods of one use methods or instance variables of another. As stated earlier, since objects of the same class have the same properties, two classes are coupled when methods declared in one class use methods or instance variables defined by the other class.</p><p>Viewpoints:</p><ul><li>1) Excessive coupling between object classes is detrimental to modular design and prevents reuse. The more inde- pendent a class is, the easier it is to reuse it in another application.</li><li><em>2)</em> In order to improve modularity and promote encapsu- lation, inter-object class couples should be kept to a minimum. The larger the number of couples, the higherthe sensitivity to changes in other parts of the design, and therefore maintenance is more difficult.</li><li>3) A measure of coupling is useful to determine how complex the testing of various parts of a design are likely to be. The higher the inter-object class coupling, the more rigorous the testing needs to be.</li></ul><h4 id="Response-For-a-Class-UFC"><a href="#Response-For-a-Class-UFC" class="headerlink" title="Response For a Class (UFC)"></a>Response For a Class (UFC)</h4><p>计算方法：一个类中的方法调用其他方法的数量（包括该类的其他方法和其他类的方法）</p><p>Definition: RFC = |RS| where RS is the response set for the class.</p><p>Theoretical Basis: The response set of a class is a set of methods that can potentially be executed in response to a message received by an object of that class. The cardinality of this set is a measure of the attributes of objects in the class. Since it specifically includes methods called from outside the class, it is also a measure of the potential communication between the class and other classes.</p><p>Viewpoints:</p><ul><li>1) If a large number of methods can be invoked in response to a message, the testing and debugging of the class becomes more complicated since it requires a greater level of understanding required on the part of the tester.</li><li>2) The larger the number of methods that can be invoked from a class, the greater the complexity of the class.</li><li>3) <strong>A</strong> worst case value for possible responses will assist in appropriate allocation of testing time.</li></ul><h4 id="Lack-of-Cohesion-in-Methods-LCOM"><a href="#Lack-of-Cohesion-in-Methods-LCOM" class="headerlink" title="Lack of Cohesion in Methods (LCOM)"></a><a href="http://eclipse-metrics.sourceforge.net/descriptions/pages/cohesion/LackOfCohesionInMethods.html" target="_blank" rel="noopener">Lack of Cohesion in Methods (LCOM)</a></h4><p>计算方式：一个类中，没有公共字段的方法对的数量，减去，该类中至少一个公共字段的方法对的数量。如果此值为负，则度量标准值将设置为0。</p><p>Theoretical Basis: The LCOM is a count of the number of method pairs whose similarity is 0 minus the count of method pairs whose similarity is not zero. The larger the number of similar methods, the more cohesive the class, which is consistent with traditional notions of cohesion that measure the inter-relatedness between portions of a program. If none of the methods of a class display any instance behavior, i.e., do not use any instance variables, they have no similarity and the LCOM value for the class will be zero. The LCOM value provides a measure of the relative disparate nature of methods in the class. A smaller number of disjoint pairs (elements of set P ) implies greater similarity of methods. LCOM is intimately tied to the instance variables and methods of a class, and therefore is a measure of the attributes of an object class.</p><p>Viewpoints:</p><ul><li>1) Cohesiveness of methods within a class is desirable, since it promotes encapsulation.</li><li>2) Lack of cohesion implies classes should probably be split into two or more subclasses.</li><li><strong>3)</strong> Any measure of disparateness of methods helps identify flaws in the design of classes.</li><li>4) Low cohesion increases complexity, thereby increasing the likelihood of errors during the development process.</li></ul><p><a href="https://stackoverflow.com/questions/6013032/why-does-lack-of-cohesion-of-methods-lcom-include-getters-and-setters" target="_blank" rel="noopener">缺陷</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;注意，任何一种软件度量都是有缺陷的&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Every software
      
    
    </summary>
    
    
      <category term="软件工程" scheme="https://liaoooyx.com/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
      <category term="论文" scheme="https://liaoooyx.com/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%AE%BA%E6%96%87/"/>
    
    
      <category term="软件度量" scheme="https://liaoooyx.com/tags/%E8%BD%AF%E4%BB%B6%E5%BA%A6%E9%87%8F/"/>
    
      <category term="software metrics" scheme="https://liaoooyx.com/tags/software-metrics/"/>
    
      <category term="architecutral metrics" scheme="https://liaoooyx.com/tags/architecutral-metrics/"/>
    
  </entry>
  
  <entry>
    <title>微核模式的插件式架构设计：静态代码分析工具</title>
    <link href="https://liaoooyx.com/2020/05/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E5%9F%BA%E4%BA%8E%E5%BE%AE%E6%A0%B8%E6%A8%A1%E5%BC%8F%E7%9A%84%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%EF%BC%9A%E9%9D%99%E6%80%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7/"/>
    <id>https://liaoooyx.com/2020/05/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E5%9F%BA%E4%BA%8E%E5%BE%AE%E6%A0%B8%E6%A8%A1%E5%BC%8F%E7%9A%84%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%EF%BC%9A%E9%9D%99%E6%80%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7/</id>
    <published>2020-05-02T23:00:00.000Z</published>
    <updated>2020-05-24T22:06:53.248Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p>下文中，<u>基于微核模式设计的静态代码分析工具</u>将简称为<u>工具</u></p><h4 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h4><ol><li>用户可以实现自己的软件度量方法，并作为插件集成到工具中<ol><li>以代码的方式实现</li><li>以配置的方式实现</li></ol></li><li>工具对项目代码分析完毕后，提供一个对象来获取计算软件度量所需的元数据<ol><li>需要分析究竟需要提供多少元数据才能满足用户插件的需求</li><li>如果工具提供的元数据不足，如何让用户生成新的元数据<ol><li>代码特征的最小集</li></ol></li></ol></li></ol><h4 id="基本设计思想"><a href="#基本设计思想" class="headerlink" title="基本设计思想"></a>基本设计思想</h4><ul><li>通过接口声明插件应该具备的功能。在本例中则是定义用户自定义的插件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Interface Plugin &#123;</span><br><span class="line">    void doSth();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class PrintSth implements Plugin &#123;</span><br><span class="line">    @Override</span><br><span class="line"></span><br><span class="line">    public void doSth() &#123;</span><br><span class="line">        PrintHelloWorld();</span><br><span class="line">    &#125;</span><br><span class="line">    private void PrintHelloWorld() &#123;</span><br><span class="line">        System.out.println(&quot;HelloWorld!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>至于检测插件是否实现了接口，可以使用isAssignableFrom()</li></ul><h4 id="相关技术"><a href="#相关技术" class="headerlink" title="相关技术"></a>相关技术</h4><p>OSGI（开放服务网关协议，Open Service Gateway Initiative）技术是Java动态化<a href="https://baike.baidu.com/item/模块化/3295536" target="_blank" rel="noopener">模块化</a>系统的一系列规范。应用对象：Java动态模型系统。</p><p><a href="https://zhuanlan.zhihu.com/p/28909673" target="_blank" rel="noopener">SPI</a> （Service Provider Interface）</p><ul><li><p>在平台中使用ServiceLoader，在运行时动态加载插件（热部署+非Classpath路径加载）</p></li><li><p>优点</p><ul><li>使用 <a href="https://zhoukaibo.com/tags/java/" target="_blank" rel="noopener">Java</a> SPI 机制的优势是实现解耦，使得接口的定义与具体业务实现分离，而不是耦合在一起。应用程序可以根据实际业务情况启用或替换具体组件。</li></ul></li><li>缺点<ul><li>不能按需加载。虽然 ServiceLoader 做了延迟载入，但是基本只能通过遍历全部获取，也就是接口的实现类得全部载入并实例化一遍。如果你并不想用某些实现类，或者某些类实例化很耗时，它也被载入并实例化了，这就造成了浪费。</li><li>获取某个实现类的方式不够灵活，只能通过 Iterator 形式获取，不能根据某个参数来获取对应的实现类。</li><li>多个并发多线程使用 ServiceLoader 类的实例是不安全的。</li><li>加载不到实现类时抛出并不是真正原因的异常，错误很难定位。</li></ul></li><li>鉴于 SPI 的诸多缺点，很多系统都是自己实现了一套类加载机制，例如 dubbo。用户也可以自定义classloader+反射机制来加载，实现并不复杂。此外开源的类加载解决方案有 <a href="https://github.com/pf4j/pf4j" target="_blank" rel="noopener">Plugin Framework for Java (PF4J)</a> 等。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;下文中，&lt;u&gt;基于微核模式设计的静态代码分析工具&lt;/u&gt;将简称为&lt;u&gt;工具&lt;/u&gt;&lt;/p&gt;
&lt;h4 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h4&gt;&lt;ol&gt;
&lt;
      
    
    </summary>
    
    
      <category term="软件工程" scheme="https://liaoooyx.com/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
      <category term="笔记" scheme="https://liaoooyx.com/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="插件设计" scheme="https://liaoooyx.com/tags/%E6%8F%92%E4%BB%B6%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="微服务" scheme="https://liaoooyx.com/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="软件架构" scheme="https://liaoooyx.com/tags/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>去中心化的众包数据分析（众包：市民产生-&gt;市民使用）</title>
    <link href="https://liaoooyx.com/2020/04/%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%B3%BB%E7%BB%9F/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BC%97%E5%8C%85%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%EF%BC%88%E5%B8%82%E6%B0%91%E4%BA%A7%E7%94%9F-%E5%B8%82%E6%B0%91%E4%BD%BF%E7%94%A8%EF%BC%89/"/>
    <id>https://liaoooyx.com/2020/04/%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%B3%BB%E7%BB%9F/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BC%97%E5%8C%85%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%EF%BC%88%E5%B8%82%E6%B0%91%E4%BA%A7%E7%94%9F-%E5%B8%82%E6%B0%91%E4%BD%BF%E7%94%A8%EF%BC%89/</id>
    <published>2020-04-28T23:00:00.000Z</published>
    <updated>2020-05-24T22:03:41.099Z</updated>
    
    <content type="html"><![CDATA[<p><strong>去中心化的系统</strong>不等于<strong>分布式系统</strong></p><p>去中心化：没有中心节点</p><p>分布式系统：可能有中心节点</p><a id="more"></a><h3 id="去中心化的，隐私保护的，实时的数据分析"><a href="#去中心化的，隐私保护的，实时的数据分析" class="headerlink" title="去中心化的，隐私保护的，实时的数据分析"></a>去中心化的，隐私保护的，实时的数据分析</h3><h4 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h4><ul><li>数据是数字化经济中的新石油</li><li>无处不在的大数据和分析</li><li>大数据的危害</li><li>为什么应将大数据传播者进行再教育</li></ul><h4 id="威胁和挑战"><a href="#威胁和挑战" class="headerlink" title="威胁和挑战"></a>威胁和挑战</h4><p>在中心管理的计算基础设施中，存储和处理的大数据。（注意：分布式系统distributed system 不等于 去中心化的系统decentralized system）</p><p>大数据业务模型鼓励大规模的采集<u>侵犯隐私的个人数据</u></p><p>大数据的AI算法的透明程度和如何问责</p><p>区别对待的/歧视性的数据分析和使用，如市民概况profilling</p><p>危害自治、公平、民主</p><h4 id="大数据分析的另一种选择"><a href="#大数据分析的另一种选择" class="headerlink" title="大数据分析的另一种选择"></a>大数据分析的另一种选择</h4><p>去中心化Decentralized：不需要依赖（可信的）第三方</p><p>隐私保护Privacy-preserving：在不暴露个人数据的情况下，提供高质量的服务</p><p>众包和群众参与Crowd-sourced &amp; participatory：使用个人设备，最大化的使数据和计算的本地化</p><p>边缘计算Edge computing：使数据更本地化，减少延迟</p><p>分布式账本Distributed ledgers：不需要依赖（可信的）第三方</p><p>模糊处理Obsfucation，差分隐私differential privacy，同态加密技术homomorphic encryption techniques：用于隐私保护</p><blockquote><p><a href="https://blog.csdn.net/weixin_41564401/article/details/82777335" target="_blank" rel="noopener">同态加密</a>：数据持有者传输数据前先将数据加密，云服务器在接收到数据后照例计算，只不过这次是在密文上进行的，云服务器啥都看不到。待得到结果后再将结果的密文返还给数据持有者，数据持有者解开后即得最终结果。</p><p><a href="https://www.zhihu.com/question/47492648" target="_blank" rel="noopener">差分隐私</a>：对数据集做一个满足差分隐私的加密，并公布出去，给大众做数据分析。扰动后的数据集和源数据集的整体统计学信息（如方差、均值）几乎一致，但个体信息不一致，防止大众通过数据库对比导致隐私泄露。核心是保证数据保密性的情况下最大化数据可用性。</p></blockquote><h4 id="概括"><a href="#概括" class="headerlink" title="概括"></a>概括</h4><ol><li>自主的选择</li><li>自我监管的信息共享</li><li>去中心化的数据分析</li></ol><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1geawoy3qe0j30yu0j40xy.jpg" alt="截屏2020-04-29 下午1.23.58"></p><h4 id="难点"><a href="#难点" class="headerlink" title="难点"></a>难点</h4><ul><li>延迟：在网络中对<u>短暂的transient大数据</u>进行<u>传播dissemination、分布distribution、同步synchronization</u></li><li><p>如何通过去中心化网络上连续更新的数据流，提供及时的、精确的实时数据分析</p></li><li><p>如何根据网络动态调整数据分析：比如关联join&amp;叶子leaves节点、故障等</p></li><li>如何优化用于多程序的复杂网络的运营：比如资源向上/下扩展，去中心化系统的虚拟化</li><li>解决上述挑战的方法如何用于新的通用数据分析模型：比如MapReduce</li></ul><h4 id="挑战之一"><a href="#挑战之一" class="headerlink" title="挑战之一"></a>挑战之一</h4><p>如何以高性价比和弹性的方式，将去中心化的、动态的、隐私保护的数据分析，应用在物联网上</p><ul><li>高性价比cost-effective：通信和内存 VS 准确度</li><li>弹性resilient：面向高精度的自我更正操作</li><li>去中心化：集体的P2P计算+众包</li><li>动态的：对计算进行实时的、连续的调整</li><li>隐私保护：数据摘要summarization</li><li>分析：聚合函数Aggregation function，如SUM、AVG等</li></ul><h4 id="数据分析的焦点：聚合函数-Aggregation-Functions"><a href="#数据分析的焦点：聚合函数-Aggregation-Functions" class="headerlink" title="数据分析的焦点：聚合函数 Aggregation Functions"></a>数据分析的焦点：聚合函数 <strong>Aggregation Functions</strong></h4><p>用于大规模实时数据分析的常用轻量级计算</p><p>聚合函数：SUM, AVG, MAX, MIN, STDEV, COUNT, etc.</p><p>MapReduce模型中的关键操作（reduce）</p><p>适用于隐私敏感的应用：</p><ul><li>交通监控（车速）</li><li>能源需求响应（电量需求）</li><li>流行病爆发监控（受感染人群）</li><li>投票</li></ul><h4 id="聚合问题——中心化的方法"><a href="#聚合问题——中心化的方法" class="headerlink" title="聚合问题——中心化的方法"></a>聚合问题——中心化的方法</h4><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1geb6549mbnj30wq0je0ub.jpg" alt="截屏2020-04-29 下午6.50.38" style="zoom:50%;" /></p><h4 id="聚合问题——去中心化的方法"><a href="#聚合问题——去中心化的方法" class="headerlink" title="聚合问题——去中心化的方法"></a>聚合问题——去中心化的方法</h4><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1geb6795wa1j30jc09g0tg.jpg" alt="截屏2020-04-29 下午6.53.00" style="zoom:50%;" /></p><p>需要考虑：在不同的情况下以性价比高的更新方式聚合数据：</p><ul><li>不同的聚合函数</li><li>新的输入值</li><li>被移除的输入数据</li><li>关联和叶子节点</li><li>故障节点</li></ul><p>特点：</p><ul><li>自治的实体（设备/代理）有：电脑、传感器、智能手机</li><li>P2P交互</li><li>持续的通信</li><li>全局目标：聚合传感器的输出值</li></ul><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p>Evangelos Pournaras and Jovan Nikolic, On-demand Self-adaptive Data Analytics in Large-scale Decentralized Networks, in the Proceedings of the 16th IEEE International Symposium on Network Computing and Applications-NCA-2017, Cambridge, USA, November 2017 © IEEE</p><p>Evangelos Pournaras, Jovan Nikolic, Self-corrective Dynamic Networks via Decentralized Reverse Computations, in the Proceedings of the 14th International Conference on Autonomic Computing-ICAC-2017, Columbus, Ohio, July 2017 © IEEE</p><p>Evangelos Pournaras, Jovan Nikolic, Alex Omerzel, Dirk Helbing, Engineering Democratization in Internet of Things Data Analytics, in the proceedings of the 31st IEEE International Conference on Advanced Information Networking andApplications-AINA-2017, Taiwan, March 2017 © IEEE</p><p>Thomas Asikis, Evangelos Pournaras, Optimization of privacy-utility trade-offs under informational self-determination, Future Generation Computer Systems, 2018,ISSN 0167-739X</p><h4 id="动态去中心化聚合"><a href="#动态去中心化聚合" class="headerlink" title="动态去中心化聚合"></a>动态去中心化聚合</h4><p><strong>Gossip-based Aggregation</strong></p><p>Jelasity, M., Montresor, A. and Babaoglu, O., 2005. Gossip-based aggregation in large dynamic networks. ACM Transactions on Computer Systems (TOCS), 23(3), pp.219-252</p><p> <strong>Tree-based Aggregation</strong></p><p>Ding, M., Cheng, X. and Xue, G., 2003, October. Aggregation tree construction in sensor networks. In <em>2003 IEEE 58th Vehicular Technology Conference. VTC 2003-Fall (IEEE Cat. No. 03CH37484)</em> (Vol. 4, pp. 2168-2172). IEEE.</p><p><strong>Synopsis Diffusion</strong></p><p>Nath, S., Gibbons, P.B., Seshan, S. and Anderson, Z., 2008. Synopsis diffusion for robust aggregation in sensor networks. ACM Transactions on Sensor Networks (TOSN), 4(2), pp.1- 40. Vancouver</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;去中心化的系统&lt;/strong&gt;不等于&lt;strong&gt;分布式系统&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;去中心化：没有中心节点&lt;/p&gt;
&lt;p&gt;分布式系统：可能有中心节点&lt;/p&gt;
    
    </summary>
    
    
      <category term="大数据" scheme="https://liaoooyx.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="课件" scheme="https://liaoooyx.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/%E8%AF%BE%E4%BB%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>智慧城市：去中心化的普适智能</title>
    <link href="https://liaoooyx.com/2020/04/%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%B3%BB%E7%BB%9F/20%20%E6%99%BA%E6%85%A7%E5%9F%8E%E5%B8%82%EF%BC%9A%E5%8E%BB%E4%B8%AD%E5%BF%83%E5%8C%96%E7%9A%84%E6%99%AE%E9%80%82%E6%99%BA%E8%83%BD/"/>
    <id>https://liaoooyx.com/2020/04/%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%B3%BB%E7%BB%9F/20%20%E6%99%BA%E6%85%A7%E5%9F%8E%E5%B8%82%EF%BC%9A%E5%8E%BB%E4%B8%AD%E5%BF%83%E5%8C%96%E7%9A%84%E6%99%AE%E9%80%82%E6%99%BA%E8%83%BD/</id>
    <published>2020-04-26T23:00:00.000Z</published>
    <updated>2020-05-24T22:03:36.093Z</updated>
    
    <content type="html"><![CDATA[<p>数字化时代会给<u>科技-社会-经济系统</u>的<u>自我管理能力</u>带来机会和挑战</p><a id="more"></a><h4 id="数字化时代的机遇"><a href="#数字化时代的机遇" class="headerlink" title="数字化时代的机遇"></a>数字化时代的机遇</h4><p>高度自动化、更低的成本、更高的效率、更简单的通讯、在线适应 online adaptation</p><p>发生革命性概念的社会-科学行业：能源、移动、监控、食物供应链</p><blockquote><p>profiling：记录和分析一个人的心理和行为特征，以便评估或预测他们在特定领域的能力或帮助识别特定人群</p></blockquote><h4 id="威胁和挑战"><a href="#威胁和挑战" class="headerlink" title="威胁和挑战"></a>威胁和挑战</h4><p>关于隐私入侵、监控、剖析：中心化的系统；底下的公民隐私意识，和高的推理机会。</p><p>自动化：操纵性不透明算法，收割注意力，虚假新闻等。</p><h3 id="共享经济中的自我管理挑战——from-local-to-global-objectives"><a href="#共享经济中的自我管理挑战——from-local-to-global-objectives" class="headerlink" title="共享经济中的自我管理挑战——from local to global objectives"></a>共享经济中的自我管理挑战——from local to global objectives</h3><h4 id="智慧网格-Smart-Grids"><a href="#智慧网格-Smart-Grids" class="headerlink" title="智慧网格 Smart Grids"></a>智慧网格 Smart Grids</h4><p>本地：日常生活（洗衣、做饭、洗澡、充电）</p><p>全局：预防/减轻断电，最小化成产成本，最大化可再生资源的使用</p><h4 id="智慧城市"><a href="#智慧城市" class="headerlink" title="智慧城市"></a>智慧城市</h4><p>本地：共享单车——从某地存取单车</p><p>全局：预防/减缓共享单车站台过载，最小化以人工重新放置单车，最小化运营成本，最小化投资成本；</p><p>本地：选择一条导航路径</p><p>全局：预防/减轻交通拥挤，减少城市空气污染，发生交通事故或城市建造时高效的重新规划交通，最大化基础设施的生命周期</p><h4 id="集体学习"><a href="#集体学习" class="headerlink" title="集体学习"></a>集体学习</h4><p>是一种新的范例，针对去中心化得到普适智能：设计社科、分布式系统、AI</p><h5 id="自治的代理，能够自主决定一系列资源调度和分配的计划。"><a href="#自治的代理，能够自主决定一系列资源调度和分配的计划。" class="headerlink" title="自治的代理，能够自主决定一系列资源调度和分配的计划。"></a>自治的代理，能够自主决定一系列资源调度和分配的计划。</h5><p>核心思想：众包的运营灵活性。</p><p>关键点：普适的自治性，隐私，没有推诿 no nudding，增强信任</p><h5 id="平衡个人（本地）和集体（全球）目标的代理"><a href="#平衡个人（本地）和集体（全球）目标的代理" class="headerlink" title="平衡个人（本地）和集体（全球）目标的代理"></a>平衡个人（本地）和集体（全球）目标的代理</h5><p>核心思想：经过设计的对社会负责的决策</p><p>关键点：内在利益与外在动机之间的相互作用</p><h5 id="代理商协调和合作选择他们的计划"><a href="#代理商协调和合作选择他们的计划" class="headerlink" title="代理商协调和合作选择他们的计划"></a>代理商协调和合作选择他们的计划</h5><p>核心思想：利用群众的计算资源进对包进行自我管理</p><p>关键点：通过设计使用专有的汇总信息来保护隐私</p><h3 id="区域自治计划——参与模型"><a href="#区域自治计划——参与模型" class="headerlink" title="区域自治计划——参与模型"></a>区域自治计划——参与模型</h3><p>由代理自我决定的，（可替换的）运营计划</p><ul><li>自我决定：自治</li><li>可替换的：灵活性</li><li>运营：取决于应用</li><li>计划：资源调度和分配</li></ul><h4 id="计划的灵活性"><a href="#计划的灵活性" class="headerlink" title="计划的灵活性"></a>计划的灵活性</h4><ul><li>住宅供电需求</li></ul><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gea1ru9sp4j30s40i4n1g.jpg" alt="截屏2020-04-28 下午7.34.08" style="zoom: 33%;" /></p><ul><li>共享单车</li></ul><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gea1sgcschj311q0midqm.jpg" alt="截屏2020-04-28 下午7.34.46" style="zoom: 25%;" /></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gea1w1wau9j31200h0wls.jpg" alt="截屏2020-04-28 下午7.38.13" style="zoom:33%;" /></p><ul><li>交通</li></ul><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gea1xeya1fj31180jigrh.jpg" alt="截屏2020-04-28 下午7.39.34" style="zoom:33%;" /></p><h3 id="全局优化"><a href="#全局优化" class="headerlink" title="全局优化"></a>全局优化</h3><h4 id="系统范围的集体目标-System-wide-Collective-Objectives"><a href="#系统范围的集体目标-System-wide-Collective-Objectives" class="headerlink" title="系统范围的集体目标 System-wide Collective Objectives"></a>系统范围的集体目标 System-wide Collective Objectives</h4><ul><li>成本函数</li><li><ul><li>线性<ul><li>可被局部优化——不需要协作</li></ul></li><li>二元 quadratic：<ul><li>需要协作和集体决策</li><li>如最小化方差或均方根误差</li></ul></li></ul></li><li>通用稳定性，和指标匹配</li><li>复杂度 = <script type="math/tex">可能的计划数量^{设备数量}</script></li><li>组合优化问题——NP难</li></ul><h4 id="EPOS-解决方案"><a href="#EPOS-解决方案" class="headerlink" title="EPOS 解决方案"></a><a href="epos-net.org">EPOS</a> 解决方案</h4><p><strong>EPOS: Economic Planning &amp; Optimized Selections</strong></p><p><strong>I-EPOS I</strong>terative</p><h4 id="协作结构——自我管理树状拓扑"><a href="#协作结构——自我管理树状拓扑" class="headerlink" title="协作结构——自我管理树状拓扑"></a>协作结构——自我管理树状拓扑</h4><p>基于流言的交互与信息交换</p><p>E.Pournaras,M.Warnier,and F.M.Brazier,“<em>Adaptive</em> <em>self-organization in distributed tree topologies</em>,” <em>International Journal of Distributed Systems and Technologies (IJDST)</em>, vol. 5, no. 3, pp. 24–57, 2014</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gea4v5l33uj30cg0dcgqr.jpg" alt="截屏2020-04-28 下午9.21.11" style="zoom: 50%;" /></p><h4 id="区域计划选择——区域-amp-全局成本"><a href="#区域计划选择——区域-amp-全局成本" class="headerlink" title="区域计划选择——区域&amp;全局成本"></a>区域计划选择——区域&amp;全局成本</h4><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gea566mtnsj312o0m2go7.jpg" alt="截屏2020-04-28 下午9.31.47"></p><h4 id="协作——分布式集体决策"><a href="#协作——分布式集体决策" class="headerlink" title="协作——分布式集体决策"></a>协作——分布式集体决策</h4><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gea584zgpqj30xo0mc0z4.jpg" alt="截屏2020-04-28 下午9.33.40"></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gea5bj7kuxj310o0nudmx.jpg" alt="截屏2020-04-28 下午9.36.56"></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gea5bqkujej310o0nkn3q.jpg" alt="截屏2020-04-28 下午9.37.07"></p><h3 id="社科权衡-Socio-technical-Trade-offs"><a href="#社科权衡-Socio-technical-Trade-offs" class="headerlink" title="社科权衡  Socio-technical Trade-offs"></a>社科权衡  <strong>Socio-technical Trade-offs</strong></h3><h4 id="社会衡量"><a href="#社会衡量" class="headerlink" title="社会衡量"></a>社会衡量</h4><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gea5ft0aadj310y0lq77f.jpg" alt="截屏2020-04-28 下午9.40.39"></p><h4 id="监管能力与权衡"><a href="#监管能力与权衡" class="headerlink" title="监管能力与权衡"></a>监管能力与权衡</h4><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gea5gocy55j311u0lu7cm.jpg" alt="截屏2020-04-28 下午9.41.53"></p><h4 id="对计划选择的影响"><a href="#对计划选择的影响" class="headerlink" title="对计划选择的影响"></a>对计划选择的影响</h4><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gea5h3qkylj312a0es79j.jpg" alt="截屏2020-04-28 下午9.42.18"></p><h3 id="最新技术的比较：COHDA-Greedy-EPOS"><a href="#最新技术的比较：COHDA-Greedy-EPOS" class="headerlink" title="最新技术的比较：COHDA, Greedy, EPOS"></a>最新技术的比较：COHDA, Greedy, EPOS</h3><p>C. Hinrichs, S. Lehnhoff, and M. Sonnenschein, “COHDA: A combinatorial optimization heuristic for distributed agents,” in <em>International Conference on Agents and Artificial Intelligence</em>. Springer, 2013, pp. 23–39.</p><p>E. Pournaras, M. Warnier, and F. M. Brazier, “Local agent-based self-stabilisation in global resource utilisation,” <em>International Journal of Autonomic Computing</em>, vol. 1, no. 4, pp. 350–373, 2010.</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gea5j94jlcj311y0negya.jpg" alt="截屏2020-04-28 下午9.44.21"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;数字化时代会给&lt;u&gt;科技-社会-经济系统&lt;/u&gt;的&lt;u&gt;自我管理能力&lt;/u&gt;带来机会和挑战&lt;/p&gt;
    
    </summary>
    
    
      <category term="大数据" scheme="https://liaoooyx.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="课件" scheme="https://liaoooyx.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/%E8%AF%BE%E4%BB%B6/"/>
    
    
      <category term="智慧城市示例" scheme="https://liaoooyx.com/tags/%E6%99%BA%E6%85%A7%E5%9F%8E%E5%B8%82%E7%A4%BA%E4%BE%8B/"/>
    
      <category term="去中心化" scheme="https://liaoooyx.com/tags/%E5%8E%BB%E4%B8%AD%E5%BF%83%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Apache Storm</title>
    <link href="https://liaoooyx.com/2020/04/%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%B3%BB%E7%BB%9F/19%20Apache-Storm/"/>
    <id>https://liaoooyx.com/2020/04/%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%B3%BB%E7%BB%9F/19%20Apache-Storm/</id>
    <published>2020-04-26T23:00:00.000Z</published>
    <updated>2020-05-24T22:03:23.635Z</updated>
    
    <content type="html"><![CDATA[<p>Storm是一个分布式的实时计算系统，针对于大数据中高速率Velocity、大体积Volumn的特点。Storm中每个节点的处理速度能超过每秒百万条记录。Storm还旨在简化对无界的流数据的可靠处理</p><p><a href="https://blog.csdn.net/u011082453/article/details/82417259" target="_blank" rel="noopener">补充参考文章</a></p><a id="more"></a><h4 id="Storm流"><a href="#Storm流" class="headerlink" title="Storm流"></a>Storm流</h4><p>Storm中的核心抽象是流Stream。流是一种数据格式，是一个不间断的无界的连续多元组序列。Storm在建模事件流时，把流中的事件抽象为tuple即多元组。流通过schema定义，其中的字段以多元组形式出现，每个流都有一个ID。</p><p>Storm提供原语，以可靠的方式，将流转化为新的分布式流（比如将推文流转化为趋势话题流）。</p><p>Spouts和Bolts是两个基本的Storm原语</p><blockquote><p>流是一个没有边界的tuple序列，而这些tuples会被以一种分布式的方式并行创建和处理。 每个tuple可以包含多列，字段类型可以是： integer, long, short, byte, string, double, float, boolean和byte array。 还可以自定义类型 — 只要你实现对应的序列化器。</p></blockquote><h4 id="Spouts：消息生产者"><a href="#Spouts：消息生产者" class="headerlink" title="Spouts：消息生产者"></a>Spouts：消息生产者</h4><blockquote><p>Spouts是topology消息的生产者。Spout从一个外部源（如消息队列，Twitter API）读取多元组，并发送到topology中。 消息源Spouts可以是可靠的也可以是不可靠的。一个可靠的消息源可以重新发送一个处理失败的tuple， 一个不可靠的消息源Spouts不会。</p><p>Spout类的方法nextTuple不断发送把多元组发送到topology中，storm在检测到一个元祖被整个topology成功处理的时候调用ack, 否则调用fail。</p><p>Storm只对可靠的spout调用ack和fail。</p></blockquote><h4 id="Bolts：消息消费者"><a href="#Bolts：消息消费者" class="headerlink" title="Bolts：消息消费者"></a>Bolts：消息消费者</h4><p>一个Bolt可以消费任意数量的输入流，比如处理输入流、输出新的流等。复杂的转化可能需要多个Bolt。Bolt可以执行任何操作，包括执行函数、过滤多元组、聚合流、关联流、数据库通信等</p><blockquote><p>消息处理逻辑被封装在bolts里面，Bolts可以做很多事情： 过滤， 聚合， 查询数据库等。</p><p>Bolts可以简单的做消息流的传递。复杂的消息流处理往往需要很多步骤， 从而也就需要经过很多Bolts。第一级Bolt的输出可以作为下一级Bolt的输入。而Spout不能有下一级。</p><p>Bolts的主要方法是execute（死循环）连续处理传入的tuple，成功处理完每一个tuple调用OutputCollector的ack方法，以通知storm这个tuple被处理完成了。当处理失败时，可以调fail方法通知Spout端可以重新发送该tuple。</p></blockquote><h4 id="Storm-Topologies"><a href="#Storm-Topologies" class="headerlink" title="Storm Topologies"></a>Storm Topologies</h4><p>Storm topology网的节点由Spout和Bolt组成。它是流转化的图，topology中的边指示了bolt用于处理那些流。当spout或bolt将多元组发送到流上，它会下发到下一级指向的所有bolt。</p><p>下图是Storm集群的topology的顶级抽象。</p><p>topology中的每个节点都能并行执行，可以中心化配置并行数量（parallelism）。</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1ge8l82hgsvj30e80a4t9q.jpg" alt="截屏2020-04-27 下午1.15.59" style="zoom: 50%;" /></p><p>Strom中运行的Topologies，相当于在MapReduce模型中运行的jobs。而Strom topology可以无限的处理数据。</p><blockquote><p>Storm将流中元素抽象为tuple，一个tuple就是一个值列表value list，list中的每个value可以是任意可序列化的类型。topology的每个节点都要说明它所发送出的多元组的字段的name，其他节点只需要订阅该name就可以接收处理。</p></blockquote><p>在Storm集群中用于运行topology的实体有3个：Worker processes、Executors（Threads）、Tasks</p><div class="table-container"><table><thead><tr><th>实体</th><th>描述</th></tr></thead><tbody><tr><td>Worker processes 工作进程</td><td>一个工作进程负责执行一个topology。Storm上的一台机器可以运行一个或多个工作进程。</td></tr><tr><td>Executors（Threads）处理器线程</td><td>处理器将作为线程运行。一个工作进程可以运行多个这样的处理器线程。每个处理器线程运行一个或多个相同组件的任务（spouts、bolts）</td></tr><tr><td>Tasks 任务</td><td>负责真正的数据处理工作</td></tr></tbody></table></div><p>在Storm集群中有2种类型的节点：主节点和工作节点</p><div class="table-container"><table><thead><tr><th>节点</th><th>描述</th></tr></thead><tbody><tr><td>主节点 Master</td><td>运行后台进程“Nimbus”，类似于Hadoop中的Job Tracker；Nimbus负责在集群上分发代码，而分配任务到机器上，以及监控故障</td></tr><tr><td>工作节点 Worker</td><td>每个工作节点运行一个后台进程“Supervisor”；Supervisor负责监听分配到自身机器上的任务，开启或关闭必要工作进程</td></tr></tbody></table></div><h4 id="Storm的结构"><a href="#Storm的结构" class="headerlink" title="Storm的结构"></a>Storm的结构</h4><p>Nimbus和Supervisor之间的协调通过 <strong>Apache Zookeeper cluster</strong>完成</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1ge8mch3w61j30y20j60wy.jpg" alt="截屏2020-04-27 下午1.54.40"></p><h4 id="Apache-ZooKeeper"><a href="#Apache-ZooKeeper" class="headerlink" title="Apache ZooKeeper"></a>Apache ZooKeeper</h4><p>原本是一个Hadoop子项目。它是一个中心化的服务，针对分布式系统中的：分布式配置、服务同步、命名注册表。</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1ge8nehiv6bj30rk09amz9.jpg" alt="截屏2020-04-27 下午2.31.25" style="zoom: 50%;" /></p><p>ZooKeeper允许分布式的进程之间进行协作，通过共享的数据寄存器的分层命名空间（Znodes）实现。</p><p>ZooKeeper服务被复制到集群上的所有机器中。每个机器都维护，在内存上in-memory的<u>数据树</u>镜像，以及，持久化存储的事务日志和快照。</p><h4 id="Storm上的ZooKeeper"><a href="#Storm上的ZooKeeper" class="headerlink" title="Storm上的ZooKeeper"></a>Storm上的ZooKeeper</h4><p>Strom通过ZooKeeper集群实现Nimbus和Supervisors之间的协调。</p><p>ZooKeeper管理集群的状态（e.g. 消息acks，处理状态），使得Strom重启后也能恢复状态（关系到容错、可靠性）。</p><p>Nimbus和Surpervisors是<strong>快速衰退fail-fast</strong>和<strong>无状态stateless</strong>的，所有的状态都保存在ZooKeeper或本地磁盘上。</p><p>由于数据是在内存中处理的，因此ZooKeeper可以实现高吞吐和低延迟。</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1ge8nsz9aa4j30k60k0dia.jpg" alt="截屏2020-04-27 下午2.45.21" style="zoom:67%;" /></p><h4 id="Storm的数据模型（数据结构）"><a href="#Storm的数据模型（数据结构）" class="headerlink" title="Storm的数据模型（数据结构）"></a>Storm的数据模型（数据结构）</h4><p>Storm使用多元组作为数据模型（数据结构）。一个多元组是一个值列表。Storm支持<u>原始类型（基本数据类型）、字符串和二进制数组</u>作为多元组的字段类型。也可以通过序列化器实现自定义类型。topology中的节点还需要声明它发送的多元组的<strong>输出字段（output fields）</strong>。</p><blockquote><p>字段类型可以是： integer, long, short, byte, string, double, float, boolean和byte array。 还可以自定义类型 — 只要你实现对应的序列化器。</p><p>topology的每个节点都要说明它所发射出的多元组的字段的name，其他节点只需要订阅该name就可以接收处理。</p></blockquote><h4 id="Strom-Groupings-分组"><a href="#Strom-Groupings-分组" class="headerlink" title="Strom Groupings 分组"></a>Strom Groupings 分组</h4><p>它告诉topology应该如何将多元组发送到下一个任务</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1ge8p73szlqj30g80dk77m.jpg" alt="截屏2020-04-27 下午3.33.32" style="zoom:50%;" /></p><div class="table-container"><table><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>Shuffle groupings</td><td>发送多元组到随机任务上</td></tr><tr><td>Fields groupings</td><td>按照流的输出字段分组，相同输出字段的流会被发送到同一个任务上</td></tr><tr><td>Partial Key groupings</td><td>同样是按照字段分组，但会平衡两个bolts之间的负载</td></tr><tr><td>All groupings</td><td>将流复制到bolts的所有任务上</td></tr><tr><td>Global groupings</td><td>将整个流发送到最小ID值的一个bolt上</td></tr><tr><td>Direct groupings</td><td>允许多元组的生产者指定接收多元组的任务</td></tr></tbody></table></div><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1ge8pku8sbrj311o0d2dio.jpg" alt="截屏2020-04-27 下午3.46.43"></p><h4 id="Hadoop中的Storm"><a href="#Hadoop中的Storm" class="headerlink" title="Hadoop中的Storm"></a>Hadoop中的Storm</h4><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1ge8pllch4jj312o0oc77z.jpg" alt="截屏2020-04-27 下午3.47.28"></p><h4 id="流的可靠性"><a href="#流的可靠性" class="headerlink" title="流的可靠性"></a>流的可靠性</h4><p>Storm保证每个spout多元组都会被topology完全处理。Storm会追踪每个spout触发的元组树，并确认它什么时候能完全被处理完。每个拓扑都会有提供关联的<strong>消息超时message timeout</strong>（可配置）。如果一个spout元组没有在超时时间内完成处理，则storm会终止它，并在之后重新执行。</p><p>在bolt中，使用emit方法表示产生了一个新的多元组，使用ack方法声明该元组已经完成处理</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1ge8prfy4gjj30i00dk0vj.jpg" alt="截屏2020-04-27 下午3.53.03" style="zoom:50%;" /></p><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1ge8q4zds44j312y0p6wjj.jpg" alt="截屏2020-04-27 下午4.06.02"></p><h4 id="相关术语"><a href="#相关术语" class="headerlink" title="相关术语"></a>相关术语</h4><blockquote><p>unbounded sequence of tuples —— 无界的多元组序列<br>primitives —— 原语<br>hierarchical namespace of data registers —— 数据寄存器的分层命名空间<br>in-memory —— 内存上的</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Storm是一个分布式的实时计算系统，针对于大数据中高速率Velocity、大体积Volumn的特点。Storm中每个节点的处理速度能超过每秒百万条记录。Storm还旨在简化对无界的流数据的可靠处理&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/u011082453/article/details/82417259&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;补充参考文章&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="大数据" scheme="https://liaoooyx.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="课件" scheme="https://liaoooyx.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/%E8%AF%BE%E4%BB%B6/"/>
    
    
      <category term="Storm" scheme="https://liaoooyx.com/tags/Storm/"/>
    
  </entry>
  
  <entry>
    <title>云服务的软件质量挑战</title>
    <link href="https://liaoooyx.com/2020/04/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E4%BA%91%E6%9C%8D%E5%8A%A1%E7%9A%84%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E6%8C%91%E6%88%98/"/>
    <id>https://liaoooyx.com/2020/04/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E4%BA%91%E6%9C%8D%E5%8A%A1%E7%9A%84%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E6%8C%91%E6%88%98/</id>
    <published>2020-04-24T23:00:00.000Z</published>
    <updated>2020-05-24T22:08:30.217Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>关于软件质量的挑战，它关注的重点是改进服务（软件）的质量，提高用户对产品的可接受性。解决方案可以从以下几方面进行创新（大约28%的项目选择了前2个方案，33%的项目选择了第三个方案）：</p><ul><li>协作驱动的需求启发和分析 collaboration-driven requirements elicitation and analysis</li><li>软件验证方法 software validation and verification methods</li><li><p>为软件设计适合的工具和框架 —— 它涉及价值链上的所有参与者，从开发者到产品经理再到用户</p></li><li><p>当前正在研究一种新的标准，该标准旨在提高基于云的服务的可信性、透明性和互操作性，并引入一种能够<u>让输出进行进行自我/联合认证</u>的方法来实现该标准。</p></li></ul><ul><li>另外还需要新方法来指导软件质量发展，这些方法通过以下几个方法，帮助开发易用的、高质量的软件：<ol><li>推动应用程序开发的早期设计阶段，</li><li>提供适当的质量工程工具</li><li>学习优秀开源产品，遵循其中的最佳实践，包括开发，管理，许可，测试，标准</li></ol></li></ul><h4 id="需求工程"><a href="#需求工程" class="headerlink" title="需求工程"></a>需求工程</h4><p>在需求工程(requirement enginneering)中，通过利用大量在线用户反馈（e.g. 在论坛，应用市场，社交网络上的评分、评价），软件质量也可能得到显着提高。这能让用户参与到软件发展的过程中，帮助改进软件质量。但这需要专门的方法和工具来收集用户反馈，来帮助分析人员，系统架构师，开发人员和项目经理进行决策。方法和工具需要具有以下特点：</p><ol><li>可扩展性</li><li>自动分析用户反馈和上下文数据</li></ol><p>该方向的进一步挑战是，对匿名、隐私保护的用户活动数据进行采集，这不仅能涉及用户与软件的交互，还有助于开发商了解用户的使用环境，该采集功能需要集成到软件中（即软件开发过程）</p><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p>G. Casale, C. Chesta, P. Deussen, E. Di Nitto, P. Gouvas, S. Koussouris, V. Stankovski, A. Symeonidis, V. Vlassiou, A. Zafeiropoulos, et al. Current and future challenges of software engineering for services and applications. Procedia Computer Science, 97:34–42, 2016.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h3&gt;&lt;p&gt;关于软件质量的挑战，它关注的重点是改进服务（软件）的质量，提高用户对产品的可接受性。解决方案可以从以下几
      
    
    </summary>
    
    
      <category term="软件工程" scheme="https://liaoooyx.com/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
      <category term="论文" scheme="https://liaoooyx.com/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%AE%BA%E6%96%87/"/>
    
    
      <category term="软件质量" scheme="https://liaoooyx.com/tags/%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F/"/>
    
      <category term="云" scheme="https://liaoooyx.com/tags/%E4%BA%91/"/>
    
      <category term="需求工程" scheme="https://liaoooyx.com/tags/%E9%9C%80%E6%B1%82%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Image Caption Generation 相关问题</title>
    <link href="https://liaoooyx.com/2020/04/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E7%BB%83%E4%B9%A0%EF%BC%9A%E5%9B%BE%E5%83%8F%E5%AD%97%E5%B9%95%E7%94%9F%E6%88%90Image-Caption-Generation/"/>
    <id>https://liaoooyx.com/2020/04/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E7%BB%83%E4%B9%A0%EF%BC%9A%E5%9B%BE%E5%83%8F%E5%AD%97%E5%B9%95%E7%94%9F%E6%88%90Image-Caption-Generation/</id>
    <published>2020-04-15T13:25:47.522Z</published>
    <updated>2020-05-24T21:59:41.122Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://towardsdatascience.com/image-captioning-with-keras-teaching-computers-to-describe-pictures-c88a46a311b8" target="_blank" rel="noopener">参考文章</a></p><a id="more"></a><h3 id="Encoder-Decoder模型"><a href="#Encoder-Decoder模型" class="headerlink" title="Encoder-Decoder模型"></a>Encoder-Decoder模型</h3><p>图片字幕生成的细节：</p><ul><li><p>模型使用的词典不在乎单词的顺序问题</p></li><li><p>这是一个监督学习问题</p><ul><li><p>通过输入的Xi，预测输出的Yi</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gdus9eyca0j311q0h8n0h.jpg" alt="截屏2020-04-15 下午2.33.57"></p></li><li><p>也即是给定图片向量，每次预测基于当前的部分字幕，生成下一个单词</p><ul><li>输入：图片向量和当前的部分字幕（以词典中的索引表示）<ul><li>将字幕转化为输入，涉及到词嵌入技术（the word embedding techniques），比如 GLOVE词嵌入模型，将每个单词都匹配为长度200（自定义）的向量</li><li>也可以单纯的只使用词典本身作为向量（在词典中存在为1，不存在为0）</li></ul></li><li>预测输出：下一个单词</li></ul></li></ul></li></ul><hr><h3 id="相关问题"><a href="#相关问题" class="headerlink" title="相关问题"></a>相关问题</h3><h4 id="Q1-What-the-advantages-disadvantages-might-be-of-using-lemmatized-vs-regular-tokens"><a href="#Q1-What-the-advantages-disadvantages-might-be-of-using-lemmatized-vs-regular-tokens" class="headerlink" title="Q1. What the advantages/disadvantages might be of using lemmatized vs regular tokens."></a><strong>Q1. What the advantages/disadvantages might be of using lemmatized vs regular tokens.</strong></h4><p>Tokenization is the process of splitting any string into words. It is an essential approach for data preparation relevant to field of language processing. In this process, there are lots of methods can be applied thus lead to different type of tokens such as lemmatized tokens and regular tokens. Lemmatization usually refers to transforming words from inflected, singular forms etc. to the base form, known as the lemma, which is an actual word in a dictionary. For example, <em>am</em>, <em>is</em>, <em>are</em> will be converted to <em>be</em>, and <em>runs</em>, <em>ran</em>, <em>running</em>, will be of <em>run</em>. During Lemmatization process, the transformation of a specific word relies on the current context, such as identifying whether the word <em>saw</em> is a noun or a verb.</p><p>The regular tokens are generated from simple process such as tokenization, removing punctuation, converting words into lowercase while lemmatized tokens have one more process which is Lemmatization. The mainly different is whether the token word is remaining same or converted to a base form.</p><p>There are many advantages of using lemmatized tokens. One of the most widely known advantages is it can give a better result by removing the inflectional endings only and therefore can properly represents a group of related words with same token. For example, in this Image Caption Generation task, where the data is not big enough, lemmatized tokens can represent the highly discrete words more aggregated. The inflected words with same meaning will be grouped and hence will not affect the weight differently in the network. From another perspective, it is equivalent to increasing the amount of data. As a result, the generated caption might be more accurate. However, it comes with the costs. Lemmatization uses a corpus to transform the words and takes the context of original text into account, which means more computing and storage consumption. On the other words, it will slow down the processing speed and use more memory.</p><p>On the other hand, the advantages and disadvantages of regular tokens are opposite to lemmatized tokens. As its simplicity, it is suitable for the tasks with constraints on time and memory. What’s more, English is not an inflection-rich language (comparing with Spanish and Arabic) thus not that much influence if using regular tokens. But the results may inevitably worse than using lemmatized tokens.</p><p>In conclusion, using lemmatized tokens is usually a better option, but still coms with its drawback. In some circumstances, the regular tokens might be more suitable. As a result, people should depend on the use case to choose a proper approach. </p><h4 id="Q2-Present-the-sample-images-and-generated-caption-for-each-epoch-of-training-for-both-the-RNN-and-LSTM-version-of-the-decoder-including-the-BLEU-scores"><a href="#Q2-Present-the-sample-images-and-generated-caption-for-each-epoch-of-training-for-both-the-RNN-and-LSTM-version-of-the-decoder-including-the-BLEU-scores" class="headerlink" title="Q2. Present the sample images and generated caption for each epoch of training for both the RNN and LSTM version of the decoder, including the BLEU scores."></a><strong>Q2. Present the sample images and generated caption for each epoch of training for both the RNN and LSTM version of the decoder, including the BLEU scores.</strong></h4><p>In this task, the report chooses the same two images for observing the generated caption for RNN and LSTM. Table 1 is listing the parameters which remain the same in the sampling process, including the image, the reference captions used for computing BLEU score, and the weights of BLEU for each gram. Table 2-6 are comparing the generated caption and the corresponding BLEU cumulative score between LSTM and RNN at each epoch. Noticed that the tokens <start> and <end> has been removed from generated caption.</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gdx7qbb7ghj30rs0k6gt9.jpg" alt="截屏2020-04-17 下午5.07.53"></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gdx7qm6t9xj30s408sacl.jpg" alt="截屏2020-04-17 下午5.08.08"></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gdx7rl8hmhj30p808e0xv.jpg" alt="截屏2020-04-17 下午5.09.09"></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gdx7rxx5xuj30rq0qkn56.jpg" alt="截屏2020-04-17 下午5.09.27"></p><h4 id="Q3-Compare-training-using-an-RNN-vs-LSTM-for-the-decoder-network"><a href="#Q3-Compare-training-using-an-RNN-vs-LSTM-for-the-decoder-network" class="headerlink" title="Q3. Compare training using an RNN vs LSTM for the decoder network."></a><strong>Q3. Compare training using an RNN vs LSTM for the decoder network.</strong></h4><p>In this coursework, we are the using encoder-decoder model for image caption generation. For both RNN decoder or LSTM decoder, they are all using the same encoder with CNN, which is responsible for extracting and compressing the contents of images into small feature vectors. And the variable that might affect the generated captions is controlled between RNN and LSTM in the decoder. The comparison will start by comparing the structure and then move to the results of the CW code, including the overall loss and BLEU score, the difference for training with long or short captions and quality of generated captions.</p><p>From the structural level, the recurrent neural network (RNN) is a feedforward neural network that has internal memory and is recurrent in nature. The traditional convolutional neural network (CNN) in which the data stream is flowing from layer to layer has no connections between neurons (or nodes) inside the layer, causing current neuron lacks memory for the previous neurons. While RNN, on the contrary, has connections between neurons inside the hidden layers. The inputs of a current neuron include the outputs of the last layer and the previous neuron in the current layer. As a result, RNN is suitable for sequence-related tasks such as speech recognition, natural language processing, etc. </p><p>Long short-term memory network (LSTM) is a variant of RNN, belonging to feedback neural network. It is aiming to deal with the problems of gradient vanish that traditional RNN encountered during training, which means losing information in a long-distance propagation. LSTM has a similar structure as RNN in general but more complex in details. Comparing with RNN, a common LSTM has an additional parameter to keep the memory of previous data over arbitrary time intervals, called cell state, which is the core of LSTM. To regulate the information over the cell, there are three gates named forget gate, input gate and output gate. The forget gate decides which information will be removed from the last cell state. The input gate is deciding what information should be added to the current cell state. Concatenate these two steps with the last cell state, it can update the current cell state. Then, the output gate determines which information will be outputted based on above, and finally get the output. This structure helps LSTM to address the vanishing gradient problem, and accordingly, have better performance than traditional RNN in terms of longer time series tasks</p><p>To evaluate and compare models, the first criteria is observing the loss value on both the straining step and test step. Figure 1 illustrates the trends of loss for LSTM and RNN, including the loss values for every batch and the average loss values at each epoch. But the difference between them is hard to find. From table 7, which is showing the average loss in number, it can still be noticed that the loss of LSTM is slightly bigger than that of RNN at the first epoch and becomes slightly smaller at the final epoch.</p><div class="table-container"><table><thead><tr><th style="text-align:center"><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gduye45gbrj30h00cw0tx.jpg" alt="地图的截图  描述已自动生成"></th><th style="text-align:center"><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gduye5z19zj30hb0crmyc.jpg" alt="手机屏幕截图  描述已自动生成"></th></tr></thead><tbody><tr><td style="text-align:center">(1)    LSTM</td><td style="text-align:center">(2)    RNN</td></tr></tbody></table></div><p> Figure 1: Loss per batch and  average loss per epoch during training for LSTM (1)  and RNN (2).  </p><p>Table 7: Average loss for LSTM and RNN on training set at each epoch.</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gduylad30jj310y0900ts.jpg" alt="截屏2020-04-15 下午6.20.37"> </p><p>After finish training the model, we can evaluate the model using the test set. Here we compare the loss of model on the test set between LSTM and RNN, as well as the differences of BLEU score. In Table 8, the loss of model with LSTM decoder is also lower than that with RNN decoder. Figure 2 is illustrating the cumulative BLEU scores from 1-gram to 4-gram, which can describe the overall performance of generated captions in the perspective of words. The areas under the line are representing the percentage of captions with different scores, where blue lines stand for LSTM and orange lines stand for RNN. From the distribution of the area under the lines, we might find that the area of RNN is prone to the left than the area of LSTM, indicating a lower score. The vertical dash lines in the figures that point out the average score over the whole test set (figure 2, where the actual values are shown in table 9) prove this again. On the other hand, we have to notice that LSTM are more likely to get scores very close to zero.</p><p>Table 8: Loss for LSTM and RNN on test set</p><div class="table-container"><table><thead><tr><th></th><th>LSTM</th><th>RNN</th></tr></thead><tbody><tr><td>Test set</td><td>2.603</td><td>2.725</td></tr></tbody></table></div><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gduye539qzj30z80b341c.jpg" alt="图片包含 游戏机, 设备  描述已自动生成"></p><p>Figure 2: All of Cumulative BLEU scores and the average of scores on test set for LSTM and RNN, score from 0 to 1 separated into 30 bins.</p><p> Table 9: Average cumulative BLEU score for LSTM and RNN on test set.</p><div class="table-container"><table><thead><tr><th></th><th>LSTM</th><th>RNN</th></tr></thead><tbody><tr><td>1-gram</td><td>0.550</td><td>0.494</td></tr><tr><td>2-gram</td><td>0.461</td><td>0.416</td></tr><tr><td>3-gram</td><td>0.452</td><td>0.417</td></tr><tr><td>4-gram</td><td>0.467</td><td>0.442</td></tr></tbody></table></div><p>Table 10 is comparing the results between images with the longest reference captions and shortest captions on average in the test set. For the image with the longest reference captions, although the 1-gram BLEU score for LSTM is slightly lower than that for RNN, the other three type of cumulative BLEU scores, from 2-gram to 4-gram, are all higher. And for the image with the shortest one, all of the BLEU scores when using LSTM to train the decoder are higher than using RNN. However, if we compare the generated captions in a human perspective, it is obvious that all of them are misdescribing the corresponding images at the same point thus do not show much difference for people.  Table 11 is showing three randomly chosen samples, giving clues that the performance of LSTM and RNN are unstable and not always giving similar scores.</p><p>We compare the loss of LSTM decoder and RNN decoder, during the training epoch on the training set and after finish training on the test set, as well as the cumulative BLEU scores on the generated captions, on average and on both the longest and the shortest reference captions. In conclusion, the difference between Loss and BLEU score in overall may indicate that LSTM may have a better performance than RNN. But with human perception, it is hard to judge which is better. And the LSTM does not show its advantages in dealing with long captions. However, this insight may not obvious and convincing enough in this case as the training set, length of the captions and training epochs seem quite constrained.</p><p>Table 10: Comparing the images with long (left) or short (right) reference captions on average in test set.</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gduyncvc1mj30u00vu454.jpg" alt="截屏2020-04-15 下午6.21.38"> </p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gdx7svcdz8j30ru13u4by.jpg" alt="截屏2020-04-17 下午5.10.09"></p><h4 id="Q4-Among-the-text-annotations-files-downloaded-with-the-Flickr8k-dataset-are-two-files-we-did-not-use-ExpertAnnotations-txt-and-CrowdFlowerAnnotations-txt-Read-the-readme-txt-to-understand-their-contents-then-consider-and-discuss-how-these-might-be-incorporated-into-evaluating-your-models"><a href="#Q4-Among-the-text-annotations-files-downloaded-with-the-Flickr8k-dataset-are-two-files-we-did-not-use-ExpertAnnotations-txt-and-CrowdFlowerAnnotations-txt-Read-the-readme-txt-to-understand-their-contents-then-consider-and-discuss-how-these-might-be-incorporated-into-evaluating-your-models" class="headerlink" title="Q4. Among the text annotations files downloaded with the Flickr8k dataset are two files we did not use: ExpertAnnotations.txt and CrowdFlowerAnnotations.txt. Read the readme.txt to understand their contents, then consider and discuss how these might be incorporated into evaluating your models."></a><strong>Q4. Among the text annotations files downloaded with the Flickr8k dataset are two files we did not use: ExpertAnnotations.txt and CrowdFlowerAnnotations.txt. Read the readme.txt to understand their contents, then consider and discuss how these might be incorporated into evaluating your models.</strong></h4><p>The file ExpertAnnotations.txt contains a set of image-captions pairs with a score that rated by experts from 1 (the caption does not describe the image at all) to 4 (the caption describes the image correctly). The file CrowdFlowerAnnotations.txt contains a collection of image-captions pairs with the judgement, by asking human whether the caption describes the image or not. Both of them giving additional non-correct captions for images compared with the file Flickr8k.token.txt, while the Crowd Flower Annotations use a binary judgement and the Expert Annotations provides a finer-grained score.</p><p>One of the limitations within the encoder-decoder model is that the only connection between the encoder and decoder is a fixed-length feature vector which represents the images with an uncertain number of objects. The feature vector may not represent all of the information of the input image so that the accuracy of the decoder will hence be affected.</p><p>On the other hand, the domain of image caption generation is related to the supervised learning using an algorithm to find out the optimal solution for generating appropriate caption of a specific image based on a collection of caption-image pairs. It is similar to image classification but far more complex as there are more objects. Hodosh et al. (2013) [1] shows that using multiple captions for an image gives better results than using a single caption. Extending from this, we suppose that if the model has additional data about not only what is correct but also what could be wrong, it might be possible to improve the model and achieve better results.</p><p>For example, when converting the words to the vector at the decoder step, we can introduce finer-grain weights with non-correct caption instead of binary values based on the two additional files. Or use it to improve the performance of the word embedding functions.</p><p>Reference:</p><p>[1] M. Hodosh, P. Young, and J. Hockenmaier. Framing image description as a ranking task: Data, models and evaluation metrics. J. Artif. Int. Res., 47(1):853–899, May 2013.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://towardsdatascience.com/image-captioning-with-keras-teaching-computers-to-describe-pictures-c88a46a311b8&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;参考文章&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="人工智能" scheme="https://liaoooyx.com/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
      <category term="实验" scheme="https://liaoooyx.com/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E5%AE%9E%E9%AA%8C/"/>
    
    
      <category term="AI" scheme="https://liaoooyx.com/tags/AI/"/>
    
      <category term="Image Caption" scheme="https://liaoooyx.com/tags/Image-Caption/"/>
    
      <category term="RNN" scheme="https://liaoooyx.com/tags/RNN/"/>
    
      <category term="encoder-decoder" scheme="https://liaoooyx.com/tags/encoder-decoder/"/>
    
  </entry>
  
  <entry>
    <title>云计算中的安全性</title>
    <link href="https://liaoooyx.com/2020/04/%E4%BA%91%E8%AE%A1%E7%AE%97/16%20%E4%BA%91%E8%AE%A1%E7%AE%97%E4%B8%AD%E7%9A%84%E5%AE%89%E5%85%A8%E6%80%A7/"/>
    <id>https://liaoooyx.com/2020/04/%E4%BA%91%E8%AE%A1%E7%AE%97/16%20%E4%BA%91%E8%AE%A1%E7%AE%97%E4%B8%AD%E7%9A%84%E5%AE%89%E5%85%A8%E6%80%A7/</id>
    <published>2020-03-31T23:00:00.000Z</published>
    <updated>2020-04-01T21:56:04.824Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h4 id="网络安全"><a href="#网络安全" class="headerlink" title="网络安全"></a>网络安全</h4><p>互联网最初的设计并没有太多的考虑安全问题。最初的观点是：“通过互联网联系在一起的相互信任的用户”，而互联网协议的设计者在其中充当佐料的角色。</p><p>网络安全领域包括黑客如何攻击电脑网络，我们如何对这些攻击进行防御，以及如何设计能够免疫攻击的结构。</p><p>在每一层中都应该考虑安全性问题。</p><h4 id="什么是网络安全"><a href="#什么是网络安全" class="headerlink" title="什么是网络安全"></a>什么是网络安全</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h4 id=&quot;网络安全&quot;&gt;&lt;a href=&quot;#网络安全&quot; class=&quot;headerlink&quot; title=&quot;网络安全&quot;&gt;&lt;/a&gt;网络安全&lt;/h4&gt;&lt;p&gt;互联网最初的设计并没有太多的考虑安全问题。最初的观点是：“通过互联网联系在一起的相互信任
      
    
    </summary>
    
    
      <category term="云计算" scheme="https://liaoooyx.com/categories/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
    
      <category term="安全性" scheme="https://liaoooyx.com/tags/%E5%AE%89%E5%85%A8%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>软件度量工具的使用和比较：SonarQube、JDEPEND、</title>
    <link href="https://liaoooyx.com/2020/04/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E5%BA%A6%E9%87%8F%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B8%8E%E5%AF%B9%E6%AF%94/"/>
    <id>https://liaoooyx.com/2020/04/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E5%BA%A6%E9%87%8F%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B8%8E%E5%AF%B9%E6%AF%94/</id>
    <published>2020-03-31T23:00:00.000Z</published>
    <updated>2020-05-24T22:08:07.295Z</updated>
    
    <content type="html"><![CDATA[<p>软件度量是对程序本身进行数值化表示的一种方法，比如方法复杂度，代码行数，包数目等。目的是帮助开发者和管理者发现软件可能存在的缺陷、技术债务积累、代码气味等问题。</p><p><a href="https://en.wikipedia.org/wiki/List_of_tools_for_static_code_analysis" target="_blank" rel="noopener">静态代码分析工具列表</a></p><a id="more"></a><h3 id="使用环境"><a href="#使用环境" class="headerlink" title="使用环境"></a>使用环境</h3><p>MacOS Catalina 10.15.4</p><p>Win10（虚拟机）</p><p>IntelliJ IDEA 2019.3</p><h3 id="SonarQube-8-2"><a href="#SonarQube-8-2" class="headerlink" title="SonarQube 8.2"></a>SonarQube 8.2</h3><p>提供多种安装方式，这里安装在本机：</p><p>下载压缩包并解压到对应目录后，使用命令行启动服务器，并访问<a href="http://localhost:9000/" target="_blank" rel="noopener">http://localhost:9000</a>即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">../sonarqube/bin/[OS]/sonar.sh console</span><br></pre></td></tr></table></figure><p>SonarQube提供的度量方法，帮助用户了解自己是否满足代码质量的标准，好的代码质量能够减少许多代码问题和技术债务的积累。确保新写的代码是干净的，从不同的层面进行分析。</p><p>在GUI中，有相关的引导，能够轻易的将SonarQube引入项目中：基本原理是在GUI页面中为项目生成一个特定的Token，在Maven或Gradle项目的配置文件中添加SonarQube插件，最后执行提供的命令即可，命令中包含了之前生成的项目令牌。</p><p>在Measure栏，SonarQube中提供了许多实用的度量方法，包括：</p><ul><li>可靠性：Bugs、分级、补救措施</li><li>安全性：易损性、分级、补救措施</li><li>安全性审查：安全性热点、分级</li><li>可维护性（对会增加更新难度的代码进行标记）：代码气味、债务（时间）、债务比例、分级、达到A级的措施</li><li>覆盖率：覆盖率、需覆盖行、未覆盖行、已覆盖率<ul><li>单元测试数量、错误、故障、跳过、成功、执行时间</li></ul></li><li>重复率：密度、重复行、重复块、重复文件</li><li>大小（数量）：代码行、总行数、声明、函数、类、文件、注释行、注释行占比</li><li>复杂度：循环复杂度（全覆盖测试的最少测试用例）、感知复杂度（理解程序的困难程度）</li><li>问题：开放问题、重开问题、确认问题、False Positive问题，保留问题</li></ul><p>在Issues栏，SonarQube还能分析代码，检测出违反开发规范的代码，并给与提醒</p><p>在Activity栏，可以展示软件度量的变化趋势，主要包括：</p><ul><li>问题：Bugs、代码气味、易损性</li><li>覆盖率：需覆盖行和未覆盖行</li><li>重复率：代码行和重复行</li><li>定制：对任意的软件度量进行组合</li></ul><p>使用该功能，每执行一次命令行则记录一次数据日志</p><p>优点：全面</p><p>缺点：</p><ul><li>无法直接回顾以前的历史记录，需要对源码进行版本控制</li><li>不开源，研究人员/开发者无法使用自己的软件度量标准</li></ul><h3 id="JDepend"><a href="#JDepend" class="headerlink" title="JDepend"></a><a href="https://github.com/clarkware/jdepend" target="_blank" rel="noopener">JDepend</a></h3><p>说明文档在</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$JDEPEND_HOME&#x2F;doc</span><br></pre></td></tr></table></figure><p>缺点：项目太老，需要修改源码重新编译，不支持可视化，没有历史记录，数据没有可视化，难以阅读，对新手来说难以理解</p><p><img src="https://tva1.sinaimg.cn/large/00831rSTgy1gdh8kjrwnij313t0u0qfg.jpg" alt="截屏2020-04-03 下午9.27.56"></p><h3 id="X-Ray"><a href="#X-Ray" class="headerlink" title="X-Ray"></a><a href="http://xray.inf.usi.ch/xray.php#download" target="_blank" rel="noopener">X-Ray</a></h3><p>2008年的工具</p><p>优点：多种可视化方式</p><p>缺点：只作为<a href="https://marketplace.eclipse.org/content/x-ray-software-visualization" target="_blank" rel="noopener">旧版Eclapse-Ganymede插件</a>使用，部分图片的内容让人感到混乱，扩展性差</p><h3 id="SourceMonitor"><a href="#SourceMonitor" class="headerlink" title="SourceMonitor"></a><a href="http://www.campwoodsw.com/sourcemonitor.html" target="_blank" rel="noopener">SourceMonitor</a></h3><p>优点：支持多语言，图形化设置，通过checkpoint可以保持和查看历史数据</p><p>缺点：只支持Windows，设置不合理，无历史记录，数据没有可视化，难以阅读，排版差</p><p><img src="https://tva1.sinaimg.cn/large/00831rSTgy1gdha02b0ilj30sg0no763.jpg" alt="截屏2020-04-03 下午10.17.29"></p><p><img src="https://tva1.sinaimg.cn/large/00831rSTgy1gdha3u8dw5j31f20iwn8m.jpg" alt="截屏2020-04-03 下午10.17.29"></p><p><img src="https://tva1.sinaimg.cn/large/00831rSTgy1gdha651nybj31f20hojup.jpg" alt="截屏2020-04-03 下午10.17.29"></p><h3 id="CodeCity"><a href="#CodeCity" class="headerlink" title="CodeCity"></a><a href="https://wettel.github.io/codecity.html" target="_blank" rel="noopener">CodeCity</a></h3><p>介绍，<a href="https://www.youtube.com/watch?v=HT3iw5l4l6U" target="_blank" rel="noopener">导入模型</a></p><p>优点：好看，功能多</p><p>缺点：复杂，旧，操作不易</p><p><img src="https://tva1.sinaimg.cn/large/00831rSTgy1gdhb7tnianj31cv0u0qo0.jpg" alt="截屏2020-04-03 下午10.59.19"></p><h3 id="FindBugs"><a href="#FindBugs" class="headerlink" title="FindBugs"></a><a href="http://findbugs.sourceforge.net/publications.html" target="_blank" rel="noopener">FindBugs</a></h3><h3 id="PMD"><a href="#PMD" class="headerlink" title="PMD"></a><a href="https://pmd.github.io/" target="_blank" rel="noopener">PMD</a></h3><p>PMD is a source code analyzer. It finds common programming flaws like unused variables, empty catch blocks, unnecessary object creation, and so forth. It supports Java, JavaScript, Salesforce.com Apex and Visualforce, PLSQL, Apache Velocity, XML, XSL.</p><p>Additionally it includes CPD, the copy-paste-detector. CPD finds duplicated code in Java, C, C++, C#, Groovy, PHP, Ruby, Fortran, JavaScript, PLSQL, Apache Velocity, Scala, Objective C, Matlab, Python, Go, Swift and Salesforce.com Apex and Visualforce.</p><p>PMD的文档，它会对代码中的如下部分进行检查：<br>　　 未使用的本地变量<br>　　 空的catch块<br>　　 未使用参数<br>　　 空if语句<br>　　 重复的import语句<br>　　 未使用的私有方法<br>　　 可能是Singletons的类<br>　　 短/长变量及方法名字</p><p>PMD提供了一项叫作CPD的很有用的功能，它检查代码的拷贝粘贴部分。我使用PMD找到的最频繁的错误是未使用的import语句，未使用的私有变量以及意外重复拼写。</p><h3 id="CheckStyle"><a href="#CheckStyle" class="headerlink" title="CheckStyle"></a><a href="https://github.com/checkstyle/checkstyle" target="_blank" rel="noopener">CheckStyle</a></h3><p>Checkstyle is a tool for checking Java source code for adherence to a Code Standard or set of validation rules (best practices).</p><p>Checkstyle检查如下部分：<br>　　 Javadoc注释<br>　　 命名约定<br>　　 标题<br>　　 Import语句<br>　　 体积大小<br>　　 空白<br>　　 修饰符<br>　　 块<br>　　 混合检查（包活一些有用的比如非必须的System.out和printstackTrace）</p><p>不像PMD，Checkstyle能够检查Javadoc注释；Checkstyle可以发现更多的错误。包括漏掉的Javadoc注释，超过80个字符的行、不合约定的变量名、用tab来代替空格等等。两个工具都允许创建自定义的规则。</p><h3 id="Jalopy"><a href="#Jalopy" class="headerlink" title="Jalopy"></a><a href="http://jalopy.sourceforge.net/" target="_blank" rel="noopener">Jalopy</a></h3><p>商用版 <a href="https://www.triemax.com/" target="_blank" rel="noopener">TRIEMAX</a></p><p>　　Jalopy是一个易于配置的源代码格式程序，它能检测并修补Java代码中大量的习惯性缺陷。Jalopy更像一个代码整理器而不是检查器。Jalopy的插件现在已经支持大多数IDE，而且多数是无缝集成。我发现Jalopy特别强大，能够干许多很酷的事情。例如，它可以修改代码缩进、对齐括号、使行宽符合某个字符长度、插入相关的Javadoc注释以及对import语句排序。Jalopy最好的地方是超级自定义功能。一个简单的用户界面就可以让你选择Jalopy的所有功能的开关，不需要XML配置文件。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>如果想在你的组织中使用它们中的一个，Checkstyle似乎更好一些：它检查公司编码约定的大多数项目。如果增强代码质量是主要目标，那PMD是一个好的选择。但是如果你想要更多的功能并真正使用工具来修改代码，应该试试Jalopy。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;软件度量是对程序本身进行数值化表示的一种方法，比如方法复杂度，代码行数，包数目等。目的是帮助开发者和管理者发现软件可能存在的缺陷、技术债务积累、代码气味等问题。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/List_of_tools_for_static_code_analysis&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;静态代码分析工具列表&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="软件工程" scheme="https://liaoooyx.com/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
      <category term="实验笔记" scheme="https://liaoooyx.com/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E5%AE%9E%E9%AA%8C%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="软件度量" scheme="https://liaoooyx.com/tags/%E8%BD%AF%E4%BB%B6%E5%BA%A6%E9%87%8F/"/>
    
      <category term="SonarQube" scheme="https://liaoooyx.com/tags/SonarQube/"/>
    
  </entry>
  
  <entry>
    <title>《A Manifesto for Future Generation Cloud Computing&amp;#59 Research Directions for the Next Decade》 —— 读书笔记</title>
    <link href="https://liaoooyx.com/2020/04/%E4%BA%91%E8%AE%A1%E7%AE%97/%E6%96%87%E7%8C%AE%E7%AC%94%E8%AE%B0/%E4%BA%91%E8%AE%A1%E7%AE%97%E7%9A%84%E6%8C%91%E6%88%98%E5%92%8C%E6%9C%AA%E6%9D%A5%E7%A0%94%E7%A9%B6%E6%96%B9%E5%90%91/"/>
    <id>https://liaoooyx.com/2020/04/%E4%BA%91%E8%AE%A1%E7%AE%97/%E6%96%87%E7%8C%AE%E7%AC%94%E8%AE%B0/%E4%BA%91%E8%AE%A1%E7%AE%97%E7%9A%84%E6%8C%91%E6%88%98%E5%92%8C%E6%9C%AA%E6%9D%A5%E7%A0%94%E7%A9%B6%E6%96%B9%E5%90%91/</id>
    <published>2020-03-31T23:00:00.000Z</published>
    <updated>2020-04-30T20:54:29.318Z</updated>
    
    <content type="html"><![CDATA[<p>云计算和按需付费模型的出现，让用户可以随时随地获得基于订阅的服务。这带来的好处包括：更短的启动时间；创建可扩展的全球企业程序；给科学计算和高性能计算带来更好的成本价值关联；以及为无处不在的普适程序带来不同的调用/执行模型。</p><p>另一方面，无服务计算、软件定义网络、物联网、边缘计算等新技术为云计算带来了机遇，但也同时带来了新的挑战，对新方法和研究策略的需求。对于解决可扩展性、灵活性、可靠性、安全性、可持续性等问题的模型，也需要重新进行评估。</p><p>该文献将定义云计算中的主要的开放性挑战，调查最新的解决方案和它们的局限。接 着讨论新兴的趋势和影响范围，以及它们如何推动未来云计算的挑战。据此再进一步讨论云计算的未来，并指出下一个十年的研究方向。</p><a id="more"></a><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>云计算模型，提供了对基于订阅的IT资源的按需访问，按需扩展，按使用付费。当前的三种主要服务模型为SaaS、PaaS、IaaS。在软件即服务SaaS中，用户通过互联网访问在数据中心上运行和管理的程序或软件，从而避免如版权、维护IT基础设施等费用；平台即服务PaaS，适合对IT资源需要更多控制的用户，但也同时为用户提供了一些框架来支持云程序的创建和部署；基础设施即服务IaaS，则允许用户访问计算资源，通常是提供虚拟机和存储空间。它不仅是前两者的基础，也是云计算的支柱。</p><p>云计算中旧有的技术同样在不断发展，在虚拟化中，容器技术的出现和广泛使用，甚至导致新的服务模型出现：容器即服务CaaS。</p><p>其中一些特定云服务专注于简化配置，以此满足特定的商业要求，这些旨在帮助企业创造价值的云服务，在种类和数量方面正在快速的增长：比如新兴的、易于使用的、基于云的数据分析服务和无服务器结构。</p><p>云计算中的分布式计算是一个更明显的发展趋势，相关概念有雾计算、边缘计算、物联网、将服务分布在地理分布的数据中心等。边缘/雾计算的核心思想是将计算能力移动到更接近数据的地方，比如移动基站、网关、交换机、路由器等，从而降低延迟；</p><blockquote><p>cluster computing —— 网格计算<br>grid computing —— 集群计算</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/00831rSTgy1gdfjn0ul31j311n0u04d1.jpg" alt="截屏2020-04-02 上午10.19.45"></p><h3 id="开放性问题"><a href="#开放性问题" class="headerlink" title="开放性问题"></a>开放性问题</h3><h4 id="可扩展性和可伸缩性（弹性）"><a href="#可扩展性和可伸缩性（弹性）" class="headerlink" title="可扩展性和可伸缩性（弹性）"></a>可扩展性和可伸缩性（弹性）</h4><ul><li>通过硬件的异质性来加速计算</li><li>资源虚拟化、性能、隔离、价值模型</li><li>用于可扩展弹性服务的软件</li><li>对性能进行监控和建模的中间件</li><li>适应性的程序编程模型</li></ul><p>网格计算和集群计算是早期的分布式计算模型，云计算与前两者不同，它的优点是可以保证按需提供几乎无限的计算资源。好处之一是<strong>云计算中预料之外的计算资源需求激增不会违反<a href="http://blog.sina.com.cn/s/blog_c3917d180101c8r6.html" target="_blank" rel="noopener">服务级别协议SLAs</a></strong>，因为用户购买的固定计算资源无法给用户提供预期之外的服务质量QoS。但<strong>前提</strong>是云服务提供商提供可扩展的服务，即用户可<strong>以按需增加计算资源</strong>，并且新的计算资源能够直接给当前程序带来性能和服务质量的提升；其二是<strong>客户不需要提前调查、规划、购买硬件设备，而是根据当前需求购买云计算资源，并灵活变动</strong>。</p><p>研究挑战在于可扩展的服务，它包括硬件级、中间件级和应用级。在硬件级中，要求云计算提供商有<strong>并行计算硬件</strong>，如多核、集群、加速器（GPUs），和非传统的架构（神经和量子），以及在<strong>IaaS服务</strong>中为用户提供<strong>异质硬件的抽象</strong>（如VMs、容器），同时提供隔离和性能保证。在<strong>中间件级别</strong>中，需要为用户提供<strong>编程模型和抽象</strong>，从而让使用PaaS服务的开发者可以专注于程序本身的功能（如Map、Reduce函数），而非功能性的问题（如可扩展性、容错）则交给中间件负责。在<strong>应用级</strong>中，需要开发新的算法，克服<strong>顺序确定性算法</strong>固有的可扩展性问题，包括非同步演化算法、近似算法、在线/增量算法（<a href="https://ieeexplore.ieee.org/document/5380857" target="_blank" rel="noopener">文献</a>）等，这些算法可能会通过<strong>牺牲精度或一致性来实现可扩展性和性能</strong>。</p><p>在弹性服务方面的挑战包括：如何<strong>精确预测</strong>计算资源需求和不同资源分配下的程序性能。这些工作负载和性能模型能够帮助中间件中的资源管理器进行决策，也使程序能够扩展和收缩，包括动态创建、迁移、回收虚拟机、容器和其他计算资源等。</p><p>成熟的<strong>虚拟机技术</strong>，使得CPU密集型应用中在虚拟机中的性能已经足以跟本机性能媲美，但依旧出现了<strong>容器技术</strong>，在快速启动的易于使用方面对虚拟机进行了改进。</p><p><strong>编程模型</strong>则使程序能够<strong>动态重新配置</strong>，让中间件在公有云和私有云之间迁移数据和计算，甚至是将计算移动到离数据源更近的地方，如IoT中的传感器网络。</p><p>云的可扩展性最终还是受各个<strong>组件</strong>（如计算、存储、相互联系）的扩展规模的限制。由Moore’s law 和 Dennard scaling可以推断，新的计算单元和用电量都将不再扩展，这直接影响了云的计算性能和成本。在这方面，需要研究CMOS（互补金属氧化物半导体）以外的新技术。类似的还有内存，DRAM（动态随机存取存储器）限制了成本和扩展，新的研究方向是非易失性技术，这些技术将在降低功耗的同时，进一步扩展负载存储操作内存。最后一个研究方向是<strong>光子互联</strong>，让所谓的硅光子通关光子连接传播到芯片中，改进性能、扩大规模、降低能耗。</p><h5 id="研究方向-——-硬件、中间件、应用级别"><a href="#研究方向-——-硬件、中间件、应用级别" class="headerlink" title="研究方向 —— 硬件、中间件、应用级别"></a>研究方向 —— 硬件、中间件、应用级别</h5><p>在硬件级别上，研究方向是<strong>特定功能的专用云</strong>（如Amazon提供GPUs，Google提供TPUs，Microsoft提供FPGAs），比如机器学习、数据流分析、图像视频模式识别。可应用的领域包括，机场控制点、社交网络挖掘、IoT传感器数据分析、智能运输等。云还需要适应于非传统结构，如神经形态、量子计算、纳米计算等。</p><p>研究还应包括开发合适的虚拟化抽象、即时编译的编程抽象、专用硬件的优化。还有FaaS云供应商的经济模型（比如可组合的视频、图像处理的微服务）</p><p>在中间件级别，研究应包括继续增加对现有基础设施的可重用性，加快部署速度，加快大规模部署时硬件和网络的供应。其中包括算法和软件堆栈来保证程序的可靠执行，具体方法是将故障转移到地理上远程的私有云或混合云。</p><p>研究应关于内部云，以支持同时在多个公有云供应商之间无缝的执行计算。对于高性能计算应用，需要保证多次运行下性能的一致性。还有匹配高性能计算应用的部署和调度算法来使用集群，即不会在并行执行时引入噪声。</p><p>对于通信密集型应用，需要研究高吞吐量和低延迟的网络。大数据程序对大规模数据的（近）实时处理、智能分析和关闭控制回路有很高要求。</p><blockquote><p>Service Level Agreement/SLA —— 服务协议级别<br>neuromorphic —— 神经形态<br>sequential deterministic algorithms —— 顺序确定性算法<br>asynchronous evolutionary algorithms ——非同步演化算法<br>approximation algorithms —— 近似算法<br>online/incremental algorithms —— 在线/增量算法<br>Complementary Metal-Oxide-Semiconductor —— CMOS —— 互补金属氧化物半导体<br>Dynamic Random-Access Memory —— DRAM —— 动态随机存取存储器<br>neuromorphic —— 神经形态<br>nanocomputing——纳米计算<br>Adiabatic quantum computation —— 绝热量子计算机<br>just-in-time compilation —— 即时编译</p></blockquote><h4 id="资源管理和调度"><a href="#资源管理和调度" class="headerlink" title="资源管理和调度"></a>资源管理和调度</h4><ul><li>大规模服务中的自动扩展和资源控制</li><li>多云操作和负载平衡</li><li>专门的多重控制回路设计</li><li>工作负载特征错误的敏感性</li><li>安全和资源管理的相互作用</li></ul><p>云数据中心有多达几十万的计算和存储设备，因此需要高效的资源管理和调度策略。当前的<strong>IaaS</strong>主要依赖两种<strong>虚拟机配置策略</strong>：<strong>静态</strong>和<strong>动态</strong>。静态策略使用<strong>装箱算法</strong>将固定数量的物理资源分配给虚拟机；动态则通过虚拟机<strong>实时迁移</strong>和其他负载平衡技术来处理负载的变化。这些策略可以是<strong>提前预测分配</strong>，也可以是<strong>监测后重新分配</strong>，但不管如何，都需要知道虚拟机资源的需求，可以是用户指定，也可以是通过监控数据进行预测</p><p>对于<strong>PaaS</strong>、<strong>SaaS</strong>供应商来说，资源管理方法可以帮助管理分配给分布式应用、容器、网络服务、微服务的资源的种类和数量。相关的策略有：1<strong>.自动扩展技术</strong>（基于当前和预测的负载动态扩展或收缩）2<strong>.资源节流技术</strong>（处理瞬时自动扩展中的工作负载突发、平滑和变化，和控制可抢占VM的使用）3.<strong>准入控制方法</strong>（处理高峰负载和高价值客户的负载优先级）4.<strong>服务编排和工作流调度</strong>（整理和编排工作负载，可能专门为特定领域设计，如科学领域中对成本和任务需求有限制的工作流，<a href="https://manuscript.elsevier.com/S0167739X15000059/pdf/S0167739X15000059.pdf" target="_blank" rel="noopener">参考文献</a>）5.<strong>多云的负载平衡</strong>（将应用的负载分布到多个云数据中心）。</p><p>其中的一个挑战是，当前的资源管理策略<strong>不适用</strong>于<strong>不精确的资管需求预测</strong>，因此需要新的权衡方法，在工作负载信息不精确的情况下，对策略<strong>最优性</strong>和<strong>稳健性</strong>之间进行权衡。当前的需求估计和工作负载预测方法在未来可能不适用，而机器学习和人工智能能否胜任有待研究。</p><p>另一个常见的问题是，资源管理策略<strong>专注于优化特定的度量指标和资源</strong>，缺少一个能在<strong>相同多重控制回路环境中共存</strong>的系统方法，使用户能公平的访问资源，以及对云堆栈各层在整体上实现最佳化（<a href="https://ieeexplore.ieee.org/abstract/document/6809354" target="_blank" rel="noopener">参考文献</a>）</p><p>当前的研究功能工作还缺少安全和资源管理之间的相互作用的风险问题</p><h5 id="研究方向"><a href="#研究方向" class="headerlink" title="研究方向"></a>研究方向</h5><p>雾计算增强了计算的去中心化，导致了资源和平台的异质性，以及工作负载的可变性。无服务计算和边缘计算则带来了将业务逻辑从系统核心中迁移出来的机会。软件定义计算和大数据则扩展了资管管理和调度的制定机制和推理技术。</p><p><strong>边缘分析</strong>的实时处理，需要边缘节点和云中心的合作资源管理，它需要感知<u>边缘设备的位置</u>和<u>资源的可用性</u>以优化资源分配，还需要在规模上考虑可移动性、高度动态的网络拓扑、隐私和安全保护约束。</p><p>在云中心和边缘上共存的<strong>多重控制回路</strong>的设计，分析、验证、实现和测试。</p><p>关于调度，在去中心化和异质的环境中，<strong>多资源公正性</strong>、<strong>非传统博弈论方法</strong>主要应用在中小规模计算集群，需要扩展应用至大规模的异质的云中心和边缘节点上。比如均场博弈可以帮助推理大量的资源、设备、用户类型的交互，从而解决固有的可伸缩性问题。</p><p>从终端用户的角度，无服务计算，即FaaS限制了函数执行的时间，从而提高了用户的期望值，而当前的性能不稳定，且响应时间还受到网络延迟的影响。此外，无服务计算按次数收费，因此需要新的资源管理策略来决定什么时候用FaaS，什么时候用在应用本地运行的微服务。</p><p>从FaaS供应商的角度，需要对资源分配进行最优化。如果要满足用户对函数执行的QoS的要求，则要权衡执行需求、网络延迟、隐私和安全问题。相关的研究包括执行时间的软约束、主动式的FaaS供应以避免资源启动时的高延迟。还有对于FaaS和其他云服务的供应商和消费者，它们有不同的目标和约束，因此需要新的<strong>博弈论方法</strong>和<strong>面向市场的模型</strong>对资源进行分配和对需求和供应的调节。</p><p>软件定义网络SDN扩展了可用于资源整体管理的控制机制的范围。在逻辑上使网络控制中心化，即单点管理，使资源管理更高效。研究之一是，软件定义网络还能促进虚拟机关联和流量的整合（传统数据中心的难点），从而优化能耗和满足SLA。</p><p>SDN中的服务功能链接SFC，是对虚拟网络功能链（如NAT、防火墙、IDS）的自动化设置。SDN和NFV组合让<u>服务链</u>能够高效、按需的安置。但最优化<strong>服务链安置</strong>还需要新的资源管理策略。VNF的虚拟化特性也简化了编排和合并，并且可以动态部署网络服务，因此需要新算法来利用这些特性。</p><p>机器学习算法也有助于VM配置、整合、负载平衡等资源管理问题，但也要注意，采用这些技术可能会导致潜在的控制失误，丧失确定性。相关的研究方法有<strong>可解释性AI</strong>。</p><p>随着处理的数据量的增加和超大规模工作流的出现，考虑诸如容错，性能建模，有效的数据管理和有效的资源使用等关键问题非常重要，而<strong>大数据分析</strong>则有助于此。例如，监视和分析资源消耗数据，可以使工作流管理系统能够检测性能异常并潜在地预测故障，从而利用诸如无服务器计算之类的技术来管理可重复使用并可在多个利益相关者之间共享的复杂工作流的执行。尽管如今存在定义此类解决方案的技术可能性，但仍缺乏将无服务器功能应用到HPC和科学计算用例的情况，因此需要对此领域进行进一步研究。</p><blockquote><p>provisioning policies —— 配置策略<br>bin-packing algorithms —— 装箱算法<br>resource throttling methods —— 资源节流技术<br>preemptible —— 抢占式的<br>service orchestration —— 服务编排<br>multiple control loops —— 多重控制回路<br>edge analytics ——边缘分析<br>multi-resource fairness —— 多资源公正性<br>game-theoretic approaches —— 博弈论方法<br>mean-field games —— 均场博弈<br>Service Function Chaining (SFC) —— 服务功能链接<br>network address translation (NAT) —— 网络地址翻译<br>intrusion detection systems (IDS) —— 入侵检测系统<br> virtual network functions (VNFs)—— 虚拟网络功能<br>NFV —— 网络功能虚拟化<br>service chain placement —— 服务链安置<br>explainable AI —— 可解释性AI</p></blockquote><h4 id="可靠性"><a href="#可靠性" class="headerlink" title="可靠性"></a>可靠性</h4><ul><li>导致大规模服务中断的故障关联</li><li>缺少整体服务可靠性模型</li><li>缺少自动的可靠性感知的服务管理机制</li><li>缺少故障感知的配置策略</li></ul><p>云数据中心的系统是高度相互关联和相互依赖的。由于云计算系统的规模、复杂性和相互依赖性，它们需要面对可靠性相关挑战，比如硬件故障、资源缺失故障、溢出故障、网络故障、超时故障、和环境改变引发的软件缺陷。有些故障会影响系统操作，连锁故障甚至会应发大规模服务中断。企业组织通常会采用严格的可靠性保证和还原能力。需要新的云服务供应方式，来保障性能和<strong>从能各种故障中恢复的能力</strong>。另一个挑战是云系统的<strong>可靠性</strong>和<strong>能耗</strong>之间的相互影响的研究。</p><p><strong>云计算是面向服务的而不是面向资源的</strong>，所以分布式计算中保障可靠性的模型（如容错）不适和直接用于云计算系统。</p><p>云计算中相互关联的特征的范围，比如巨大的规模、服务共享模型、广域网络、软/硬件组件异质性，导致难以分析云计算系统的规模和可靠性的<strong>期望值</strong>。</p><p>现有许多研究对故障进行单独分析和解决，但都忽略了<strong>故障之间的相互影响</strong>。现存对的云计算环境中也缺少可靠性模型、自动的可靠性感知的服务管理机制，和故障感知配置策略</p><h5 id="研究方向-1"><a href="#研究方向-1" class="headerlink" title="研究方向"></a>研究方向</h5><p>当前的挑战是如何提供一种可兼容的服务，以满足用户的期待——对性能、可靠性和处理各种类型故障。</p><p>RaaS可靠性即服务，旨在提供创新的云服务，提高可靠性和恢复能力以确保服务性能。主要的挑战是开发一个层次的、面向服务的云服务可靠性模型。这要求现有云系统中包括新模块，例如故障模型和工作负载模型要适应资源供应策略，并为各种应用程序提供灵活的可靠性服务。</p><p>RaaS中的其中一个研究方向是使用机器学习进行<strong>故障预测</strong>，提高故障感知的资源供应策略。这也可以作为雾计算的另一个研究方向。但需要同时考虑系统的能源效率问题。</p><p>另一个研究方向是<strong>云存储系统</strong>的可靠性。挑战在于改进大数据应用的在云存储中的容错，比如复制和<a href="https://blog.csdn.net/BtB5e6Nsu1g511Eg5XEg/article/details/82321298?depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1&amp;utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1" target="_blank" rel="noopener">纠删码</a>。涉及的参数有耐用性、可用性、存储开销、网络带宽和流量、能耗、恢复性能。<strong>基于节点故障预测的纠错码动态复制</strong>能节省网络流量和存储空间。主要挑战在于解决<strong>多变量的优化问题</strong>，以满足不同的要求。</p><blockquote><p>Reliability as a Service (RaaS) —— 可靠性即服务<br>replication —— 复制/副本<br>Erasure coding —— 纠删码<br>network traffic —— 网络流量</p></blockquote><h4 id="可持续性"><a href="#可持续性" class="headerlink" title="可持续性"></a>可持续性</h4><ul><li>云数据中心的能源需求</li><li>虚拟机整合以最小化服务器的能耗</li><li>服务器之间数据流的最佳调度策略</li><li>基于机器学习的任务分配</li><li>能源与服务质量的权衡</li></ul><p>2017年世界上大约有850万云数据中心，它们每年的耗电量比大多数国家都多（除了美、中、俄、日）。ICT设施的耗电量接近世界总体耗电量的10%。但云和网络也有助于节能，比如智慧城市，或最大程度优化可再生和不可再生能源的混合使用。考<strong>虑能</strong>耗的同时还要考虑<strong>服务质量</strong>，比如在搜救领域就不能降低服务质量来减少能耗。</p><p>当前的主要工作是整合虚拟机（涉及资源管理）以减少能耗。但其他的基础设施，比如制冷系统（接近35%能耗）、网络等也需要适合的调度算法。</p><p>多核结构，新型的基于硬件的休眠启动控件、时钟速度管理技术，让服务器的能耗取决于瞬时工作负载。因此新的基于机器学习的方法能够动态<strong>分配</strong>任务到（云或雾的）多个服务器中，从而最少的违反SLA。整体技术也需要解决网络的服务质量，比如包延迟、远程访问云数据中心的网络能源效率问题。这些技术的目的都是为了提供一个能<strong>在线自动调整</strong>或自治的方法，使云系统的能耗和服务质量<strong>作为一个整体得到解决</strong>。</p><p>当前的实验研究表明，<strong>深度学习和神经网络</strong>能够按照规定的执行延迟、响应时间、系统吞吐量、和能耗对任务进行分配（<a href="https://spiral.imperial.ac.uk:8443/bitstream/10044/1/59726/2/ServerstateDetection.pdf" target="_blank" rel="noopener">参考文献</a>）。另一种方式涉及<strong>均衡能源供应</strong>，云数据中心可以调节自身能耗并以服务质量作为响应，根据供应的能源动态的修改处理器的可变时钟速率（<a href="https://ieeexplore.ieee.org/document/6903096" target="_blank" rel="noopener">参考文献</a>）。也有人建议使用混合使用可再生和不可再生能源</p><h5 id="研究方向-2"><a href="#研究方向-2" class="headerlink" title="研究方向"></a>研究方向</h5><p>云中心可以建立在北极圈这样的地方，通过自然冷却降低能耗。但这需要研究新的系统结构，支持在地理上分布数据中心和云计算。比如依赖分布数据的协调、资源供应、能源意识和碳足迹感知的算法；地理的负载平衡。还可以通过定价影响云服务提供商的选择。还有比如使用智能电网来管理ICT组件的能耗。以及，将<u>能量流</u>与<u>计算和通信资源</u>和<u>相关的组件</u>进行动态耦合，在满足作业的QoS和SLA的同时最小化能耗。</p><p>但要注意，云中心远离用户会<strong>增加网络的能耗</strong>，也会<strong>增大延迟</strong>。比如金融交易、股票等对响应时间的要求很严格。还要注意<strong>数据的专有性</strong>，比如数据是本地的，云中心也需要在该地。</p><p>高性能和更多数据处理通常意味着更高的能耗。因此需要同时考虑QoS、SLAs和能耗，并对其在线管理。但由于情况复杂，变化太快，难以提前预测或构建出完善的模型，因此需要一种自我感知的技术。相关的研究涉及机器学习。</p><p>由于雾计算带来的异质性问题，导致资源和能源的管理难度变大，进而增大能耗。但由于用户到雾节点的距离变短，因此网络能耗却降低了。研究应包括用户流量只经过最少的雾节点时网络QoS的改善情况。机器学习将有助于该研究。</p><p><strong>虚拟机整合</strong>是一个降低云中心能耗的有效措施。但降低网络能耗是一个复杂的问题，它会影响网络的可靠性、可扩展性和性能。已经提出了智能的能量感知和路由算法。但网络能耗的研究相比计算能耗的研究要少很多。随着SDN软件定义网络的出现，SDN提供的全球网络意识和中心化决策，为此领域带来了机会。</p><blockquote><p>Information and Communications Technology, ICT —— 信息通信技术<br>sleep-start controls —— 休眠启动控件<br>Holistic techniques —— 整体技术<br>rationing the energy supply —— 均衡能源供应</p></blockquote><h4 id="异质性"><a href="#异质性" class="headerlink" title="异质性"></a>异质性</h4><ul><li>虚拟机级别、供应商级别、硬件结构级别的异质性</li><li>虚拟机放置、供应配置和调度‘</li><li>采用供应商指定语言进行硬件加速</li></ul><p>因为云供应商需要不断更新硬件以满足用户需求，以及提高性能和效率，因此出现了云内在的异质性，反映在三个层面。</p><p><strong>虚拟机</strong>层面，原因是能够以<strong>多种方式和配置方法</strong>对同质的资源进行组织（或者接近同质的，比如相同的处理器族），比如N核的同质硬件处理器可以被组织为有任意核的虚拟机。<strong>供应商</strong>层面，原因是可以从<strong>多个云供应商</strong>中利用资源，不同的云供应商有不同的虚拟机监控程序和软件套件（通常出现在多重云环境中）。<strong>硬件结构</strong>层面，原因是<strong>同时利用</strong>CPUs和硬件加速器（如GPUs、FPGAs）。</p><p>第一重挑战是<strong>异质环境中的资源和工作负载管理</strong>。资源管理专注于以静态和动态的方式对虚拟机进行安置，综合考虑网络参数和能耗的本地调度或全局调度技术。工作负载管理则通过基准技术优化工作负载的安置的调度。基准技术的实践在虚拟机层面已经足够成熟，在供应商层面也正在发展（<a href="https://link.springer.com/article/10.1007/s10922-014-9307-7" target="_blank" rel="noopener">参考文献1</a> &amp; <a href="https://pureadmin.qub.ac.uk/ws/files/74475124/Varghese_IEEETCC.pdf" target="_blank" rel="noopener">参考文献2</a>），但在<strong>硬件结构层面对工作负载的性能预测</strong>还缺少研究。除此之外 ，当前对异质资源的资源管理和工作负载管理的研究也是分别进行的。当前还缺少对3个层面的异质性进行整合和管理的通用云平台。</p><p>第二重挑战关于<strong>应用软件的开发，使之兼容异质资源</strong>。当前大部分的加速器需要不同的编程语言（比如CUDA和OpenCL需要对GPU编程），导致云程序很难采用加速器。在IaaS中，开发者只能直接面对硬件环境进行编程，而SaaS、PaaS中，可以在中间件对硬件进行抽象。但在中间件提供对加速器硬件的抽象，则会减少优化性能的可能性。因此需要对性能和易用性进行权衡。在这方面的开放性挑战是开发与底层硬件无关的软件，并且可以基于可用硬件进行适应（<a href="https://ieeexplore.ieee.org/document/7495121" target="_blank" rel="noopener">参考文献</a>）</p><h5 id="研究方向-3"><a href="#研究方向-3" class="headerlink" title="研究方向"></a>研究方向</h5><p>目前有两个因素影响异质性在云计算中的应用。<strong>第一个是管理平台</strong>，由于当前对异质云环境中的资源和工作负载管理的研究是分散的，因此缺乏在异质环境下，整体的可用性。因此提出一个涵盖了异质性三个层次的平台，可以根据应用的需求选择最佳策略。因此需要异质的内存管理。当前的内存管理主要依靠虚拟机监控程序Hypervisor，这限制了异质性带来的好处。提出的解决方案是采用异质性感知的GuestOS。</p><p><strong>第二个是抽象</strong>，当前的硬件加速器的编程模型需要指定的语言，这限制了云程序对异质性的广泛采用。研究方向之一是开发一种开源的高级编程语言，满足抽象、弹性等核心云原则，以适用于异质环境中的云程序。这对迁移云程序到<u>云和雾的整合</u>中也有帮助。</p><p>当前编程语言具有局限性，比如OpenCL。CPU和硬件加速器的交互需要显式编程。编程语言TANGRAM，提供了在不同加速器之间的可迁移性，但还缺少在CPU和加速器之间寻找最优策略的性能模型和运行时自适应。</p><p>较早的技术或许能为解决异质性问题带来灵感，比如<u>多路复用信息和计算服务</u>提供了单级内存，这是异质系统的虚拟内存的基础。IBM的CP-67是虚拟化大型机操作系统以实现时间共享的首次尝试之一，后来被VMWare用于X86服务器的虚拟化。</p><p>最近还有讨论关于拆分数据中心。传统的数据中心通过服务器和机架构建，每个服务器提供完整的计算资源。而拆分的数据中心，则是将每种资源（如CPU、内存、存储）构建成独立的资源片“blade”，通过网络进行连接，因为每种类型资源的发展速度都不一样</p><blockquote><p>homogeneous —— 同质的，同类的<br>heterogeneous —— 异质的<br>vendor —— 供应商<br>Hypervisor —— 虚拟机监控程序<br>Software suits —— 软件套件<br>Field Programmable Gate Arrays (FPGAs) —— 现场可编程门阵列<br>benchmarking techniques —— 基准技术<br>GuestOS —— 即虚拟机上的操作系统<br>Multiplexed Information and Computing Service (Multics) ——多路复用信息和计算服务</p></blockquote><h4 id="相互关联的云"><a href="#相互关联的云" class="headerlink" title="相互关联的云"></a>相互关联的云</h4><ul><li>云的相互操作性</li><li>安全性和服务质量的常见规则和标准</li><li>跨站点的虚拟网络</li><li>服务的最小公分母背后的相互操作性</li></ul><p>云供应商都各自把工作局限于自己的服务。云的相互操作性是各种类型的云和系统（如公有云、私有云）彼此相互了解的一种能力，了解的信息包括：系统接口、配置、验证和授权格式、数据格式、程序的初始化和定制化。</p><p>从更宽泛的角度来说，互连云有许多用于方法，用于整合不同的云供应商和数据中心的服务和功能。这些技术取决于互连云的参与者、它的目标、和提供给用户的服务整合的透明度（<a href="Interconnected Cloud Computing Environments: Challenges, Taxonomy, and Survey">参考文献</a>）</p><p>现有的云供应商虽然有专门的互操作机制，但并<strong>没有统一的标准和开源</strong>，因此有很大的局限性。当前的标准化工作有：OGF的OCCI、SNIA的CDMI、DMTF的CIMI和OVF、IEEE的互连云、NIST的联合云。但<strong>现存云服务的接口并没有被标准化，且很多云服务的提供商都使用不同的接口、格式和上下文配置机制</strong>。</p><p>广义上，如果各种云之间的互连是由供应商发起和管理的，这些方式可以被归为联合的云计算。<strong>联合云计算</strong>可以被看做是云计算发展的下一步，也是<strong>雾计算和边缘计算</strong>结构的组成部分。联合云模型的好处有：资源优化、节约成本、敏捷资源交付、可扩展性、高可用性、商业连续性、地理分布</p><p>共享云之间的资源有2个原因，一是公司企业希望现有的内部基础设施能够<strong>最大程度的被使用</strong>，因此公司的私有云需要与公有云无缝集成；二是公司把的大部分的程序（没有隐私要求的）转移到公有云上，以此将程序的<strong>工作负载转移</strong>到云上，或放宽资源需求的限制。</p><p>最新的项目Aneka开发了中间件和库来整合不同的资源（如VM、数据库等），但也导致非最优的云程序或者只支持特定的服务模型</p><p>互操作性和便携性在不同的组件上有不同的考虑，包括接口规范、可移动的数据格式和应用、国际公认的服务质量和安全标准。如何高效，透明的供应，管理和配置，跨站点虚拟网络，以互连本地云和外部提供商资源，是普及该技术的重要挑战。</p><p>互连云服务的最小公分母是一个限制，如何突破这个限制，从而支持更丰富的云程序是其中的一个挑战。其他挑战还有：如何在多个供应商之间的授权、访问、账单方面进行协调；如何将互连云应用到雾计算等新兴趋势中。</p><h5 id="研究方向-4"><a href="#研究方向-4" class="headerlink" title="研究方向"></a>研究方向</h5><p>跨云系统的<strong>相互操作性</strong>和<strong>可移植性</strong>是一个复杂的领域，单纯的标准化不足以解决此问题。对于可移植性，<strong>可以使用应用容器和配置管理工具</strong>。对于云服务和产品的互操作性，<strong>则可以使用软件适配器和库</strong>。但由于问题的复杂性，目前还没有让人满意的解决方案。</p><p>采用软件适配器和库的挑战之一是如何在不强制采用服务之间最小的通用功能集的情况下促进云互连，即让用户仅通过一个供应商就能集成所需的复杂功能。其他研究方向还包括使用中间件进行，将多个提供商的简单服务，模拟成一个提供商提供的复杂服务。</p><p>上述挑战带来了一个研究方向，即用户级别（内部云或混合云）的中间件，在没有供应商的支持下，识别服务组合中的各方候选。因为供应商更希望服务组合中的服务全是自己提供的。然而，只有云供应商发现互连云能给它们带来收益，真正的互连云才会出现。这需要新的计费方式。</p><p>支持服务组合的中间件必须解决其两个接口中的难题：在与云用户的接口中，它需要无缝地交付服务，而交付功能的方式与用户无关：可以从单个提供商处获得所有服务（也许调用能够提供功能的SaaS），也可以通过组合来自不同提供商的不同服务来获得；在与供应商的接口中，不管如何与供应商合作，都能够获取复杂的功能：只要接口存在，中间件就应该提供该接口的使用方法，并自动检测是否满足使用要求。</p><p>最后，软件定义网络的出现，改变和优化了网络流量，这可能对云的互连产生影响。根据谷歌的报告，SDN最早的使用方式是优化连接数据中心的广域网流量。需要研究SDN和NFV对解决此领域问题的可行性。比如SDN和NFV可以提高<u>来自多个供应商的服务组合的</u>安全性和服务质量，通过对不同服务的流量分配不同的优先级，以及分别指定安全要求。</p><blockquote><p>InterCloud —— interconnected Cloud —— 互连云<br>minimum common denominator —— 最小公分母</p><ul><li>Open Grid Forum’s (OGF) Open Cloud Computing Interface (OCCI)</li><li>Storage Networking Industry Association’s (SNIA) Cloud Data Management Interface (CDMI)</li><li>Distributed Management Task Force’s (DMTF) Cloud Infrastructure Man- agement Interface (CIMI)</li><li>DMTF’s Open Virtualization Format (OVF)</li><li>IEEE’s InterCloud</li><li>National Institute of Standards and Technology’s (NIST) Federated Cloud</li></ul></blockquote><h4 id="强化资源受限设备的自主权"><a href="#强化资源受限设备的自主权" class="headerlink" title="强化资源受限设备的自主权"></a>强化资源受限设备的自主权</h4><ul><li>移动云绑定模型——任务委托和代码分流</li><li>移动云的适应性问题</li><li>云中心的物联网</li><li>雾计算</li></ul><p>智能手机等移动设备，它们的电池、CPU、内存、存储等跟台式设备比是受限的，但可以通过外部的云资源减少这些限制。因此出现了移动云的概念。</p><p>在移动云上的主要研究包括<strong>任务委托</strong>和<strong>可移动代码负担转移</strong>。任务委托是指，从多个云供应商中移动调用网络服务，因此涉及互操作性问题，解决方案是中间件。代码负担转移，则对应用程序进行配置和分区，并将资源密集型的方法函数转移到云实例的代理上（如Cloudlets/swarmlets）。相关的研究挑战有：如何开发理想的负担转移方式、如何识别资源密集型方法、如何学习合理的决策机制——兼顾设备上下文（如电池级别、网络连通性）和云上下文（如云代理的当前负载）</p><p>物联网演变为工业4.0和互联网4.0+，而云计算能够帮助存储和分布式处理物联网节点的数据。<strong>网络延迟</strong>是以云为中心的物联网模型的挑战之一。除此之外还有<strong>能耗</strong>问题，虽然可以通过可再生能源缓解，但却又引发了<strong>服务质量</strong>问题。</p><p><strong>雾计算</strong>是一个新兴的解决方案，它的优点包括边缘设备的安全、位置识别、敏捷开发、低延迟、成本和性能上的效率，但同时也是关键的挑战。</p><h5 id="研究方向-5"><a href="#研究方向-5" class="headerlink" title="研究方向"></a>研究方向</h5><p>在移动云领域，任务委托已经实现，但代码负担转移还存在适应性问题。并且由于移动设备的性能增强，代码负担转移的好处也变得有限。这意味着只有更大负担的程序需要转移，这意味着每次负担转移成本增加。该问题的研究方向应该是设计更好的针对移动云程序的多重租赁模型，在多个移动用户间分摊成本。而移动设备也云资源的异质性，增大了问题的复杂度。</p><p>研究方向之一是针对异构环境中负担转移的激励机制，鼓励移动用户参与并获得回报。另一个研究方向是新技术（无服务计算、CaaS、雾计算）对移动云领域的作用的详细探索。</p><p>激励机制还跟IoT和雾计算有关。比如由雾的提供者自己提供建立雾节点的基础设施，使雾节点更靠近数据源。这遵循消费者即提供者CaP模型，即利用消费者的台式机执行各种分布式计算任务。</p><p>另一方面轻量级的容器技术也更适合被雾节点采用。</p><p>对实时数据流分析之类的领域，<strong>边缘分析</strong>是另一个研究方向。原本的CIoT模型的数据处理在云中进行，雾节点只用于降低延迟。而边缘分析则是将数据处理分散在了整个雾计算拓扑层中，即边缘设备、雾节点和云。中间的处理包括过滤、整合、错误探测等。研究可以从QoS和QoE两方面对支持边缘分析的框架（如Apache Edgent）进行分析。目前已经有<u>在整个雾计算拓扑中对边缘分析任务和程序的调度和放置</u>的初步解决方案。</p><blockquote><p>task delegation —— 任务委托<br>mobile code offloading —— 可移动代码负担转移<br>Cloudlet —— 小云<br>swarmlets —— 小集群<br> consumer-as-provider (CaP) model —— 消费者即提供者模型<br>the Cloud-centric IoT (CIoT) model —— 以云为中心的物联网模型<br>QoE (Quality of Experience)  —— 体验质量</p></blockquote><h4 id="安全性和隐私"><a href="#安全性和隐私" class="headerlink" title="安全性和隐私"></a>安全性和隐私</h4><ul><li>基于编码的数据保护</li><li>选择性的信息共享</li><li>细粒度的访问</li><li>查询的机密性和完整性</li><li>基于安全性的云供应商原则</li></ul><p>涉及机密性、完整性、可用性。</p><p>在机密性方面，通常是在储存前在云供应商外部对数据进行编码，但这限制了云供应商的查询评估。解决方案之一是<strong>索引</strong>，使部分查询评估不需要对数据进行解码。索引是保存了部分数据属性的元数据，对索引的定义需要在精确性和隐私性方面取得平衡，<strong>精确的索引能提高查询性能，但会暴露数据信息</strong>。某些编码技术也支持直接对数据进行操作和评估，不需要解码。比如<strong>OPE</strong>和<strong>同态加密</strong>。一些加密的数据库系统支持<strong>对加密数据进行SQL查询</strong>。</p><p>一些基于云的程序（比如健康管理、社交服务等）会从多个数据源获得数据，而一些数据挖掘工具会因此挖掘到比预期更多的隐私数据，如何保护隐私性是一个挑战。对此的研究挑战是如何设计隐私保护的理论模型和实践机制。当前的研究趋势是<strong>采用机器学习分析大数据</strong>，包括威胁分析、攻击智能、病毒传播、数据关联等。</p><p>常用的保护措施是，隐私数据仅对通过加密登录的用户本身开放，但有时候需要选择性的公开一些数据给其他用户，常用的方法是：<strong>选择性加密</strong>和<strong>基于属性加密ABE</strong>。但选择性共享数据还要考虑到第三方合作共享和分布式计算的场景可能出现的问题。</p><p>有时候数据之间的关联比数据本身更加敏感，可以将数据拆分成不同部分并储存在不同的服务器中，但这会导致查询复杂度增加。</p><p>虽然<strong>选择性访问</strong>的问题已经被解决，但却会受到利用访问频率侵犯数据和用户隐私的攻击。解决方案是<strong>私有信息检索RIP技术</strong>，它涉及隐私保护索引技术：比如Oblivious RAM、B-tree结构、二分搜索树（<a href="https://ieeexplore.ieee.org/abstract/document/7830709" target="_blank" rel="noopener">参考文献</a>）。但该领域的实践性解决方案仍然是一个挑战。</p><p>关于完整性的技术有：数字签名、PDP、POR、将探测到的数据未授权修改存储在云供应商外部等。验证授权用户的数据的<strong>完整性</strong>只是其中一个方面。还有，由多用户共享数据的改变和查询引起的问题。相关的方法有确定性方法（使用认证的数据结构）和概率方法（完整性检查插入）（<a href="http://pdfs.semanticscholar.org/8cc0/0323e1907a0cf19561827fe4fa8047334e6f.pdf" target="_blank" rel="noopener">参考文献</a>），都可以代表有希望的方向，但所提供的适用性和完整性保证受到限制。</p><p>关于可用性，是如何让用户能够选择到满足其安全性需求的云供应商（云供应商的行为通常在SLAs中声明）。最近的研究有关于不同云服务特征的可能依赖的探索，但这只是第一步。</p><p>基于硬件的技术也可以保护云中的数据，最著名的是ARM TrustZone和 Intel SGX 技术。简单来说就是创建安全的执行环境。</p><p>高级持久性威胁APTs是一类新的网络攻击，特点是面向目标，高度针对性，组织合理，资金充裕，技术先进，隐秘且持久。目前缺乏足够的防御手段，以及减少损失的措施，如技术驱动或原则驱动的解决方案。</p><h5 id="研究方向-6"><a href="#研究方向-6" class="headerlink" title="研究方向"></a>研究方向</h5><p>主要研究方向是<strong>敏感数据管理</strong>。一，在简单的情况下，只需要保证数据存储的安全性，并保证对数据进行高效访问和操作。第二种情况是数据需要在多用户之间共享，并且可能存在多个提供者以提供更好的功能和安全性。</p><p>在简单的情况下，除了要保证数据的安全性，还需要<strong>可扩展性</strong>和良好的<strong>性能</strong>，且<strong>不能影响服务功能</strong>。具体来说，需要：1，能简单与当前的云技术集成；2，避免由于<u>选择性的获取数据</u>或<u>支持加密查询</u>而泄露数据；3，支持多种查询。</p><p>在第二种情况下，当有多个用户和多个云供应商时，第一个问题是设计用于选择性共享数据的解决方案，该方案支持：1，写入权限和多个写入者；2，当有多个供应商参与存储时，有效的执行策略更新；3，在参与分布式计算的各方中，选择性的共享信息，从而可以选择不安全但是更便宜的供应商。</p><p>分布式计算的执行还与<strong>隐私数据查询</strong>和<strong>数据完整性</strong>有关。相关的研究应针对开发的可扩展和高效的技术，以：1，支持不同用户并发访问；2，确保用户的活动不会造成数据库上下文泄露。</p><p>关于数据的完整性，挑战在于如何证明数据分布存储在多个云供应商时，数据的完整性。现有解决方案所提供的<u>完整性保证</u>以及<u>受支持的查询种类</u>受到限制。因此，需要设计一种通用框架来对<u>完整性的保证程度</u>进行评估，根据用户的付费来提供不同程度的保证和支持查询的类型。</p><p>雾计算和大数据对的副作用是数据的泄露的可能性变大。基于雾计算的方案中缺乏中央控制可能会引发隐私和信任问题。雾计算会假设存在可信节点和恶意节点。这需要从早期的P2P扩展到雾计算中，包括安全路由、冗余路由和信任拓扑。尽管可以把所有数据都传到数据湖中进行安全性分析，但并非所有设备都保持联网状态，并且把所有数据集中的经济成本很高。数据的种类（半/非 结构化）加剧了可扩展数据的保护问题，尤其是在大数据领域。</p><p>其他问题和<strong>大数据的来源和质量</strong>有关，数据的来源关系到数据是否可信，数据的质量对于特定领域十分重要（如医疗）。区块链可以保证数据不可变、可追溯、可验证，但由于数据不可变，也带来了新的隐私问题。</p><p>在基础设施级别，需要研究的安全性和隐私问题有：1，针对云中的多重租赁的虚拟化的正确管理；2、针对用户安全性需求的虚拟机资源的分配和取消；3，识别合法请求以处理<u>拒绝服务DoS攻击</u>和其他网络攻击，比如对云服务的协同攻击可能被错误地推断为合法流量，云会扩大资源来处理它们，导致额外的成本和能源浪费。</p><blockquote><p>Order Preserving Encryption —— OPE<br>fully (or partial) homomorphic encryption —— 全、半同态加密<br>selective encryption —— 选择性加密<br>attribute-based encryption (ABE) ——基于属性的加密<br>Private Information Retrieval (PIR) —— 私有信息检索<br>privacy-preserving indexing techniques —— 隐私保护索引技术<br>Oblivious RAM<br>Provable Data Possession —— PDP<br>Proof Of Retrievability —— POR<br>Software Guard Extensions —— SGX<br>Advanced Persistent Threats (APTs) —— 高级持久性威胁<br>selectively sharing data —— 选择性共享数据<br>Denial of Service (DoS) —— 拒绝服务</p></blockquote><h4 id="云计算的经济"><a href="#云计算的经济" class="headerlink" title="云计算的经济"></a>云计算的经济</h4><ul><li>服务级别协议和策略管理</li><li>将内部的基础设施迁移到公有云供应商</li><li>选择合适的云供应商</li><li>云的许可模型</li></ul><p>近年来，云经济学的研究主题集中在许多关键方面：1.云服务的定价；2.代理机制（搜索符合用户预算的资源）；3.监视以确定是否满足用户要求（涉及SLAs），比如WS-Agreement之类的规范的实现。</p><p>云经济学涉及SLA，而SLA管理又与<u>计算资源、实例和服务</u>的供应和需求有关，在这方面有许多关于<u>基于原则的方法</u>和相关的<u>最优化策略</u>的研究（因为缺少资源适用场景）</p><p>另一个相关的方面是如何迁移公司内部的基础设施和IT部门到云供应商。比如迁移服务需要考虑服务后续如何使用，对业务能力的影响；迁移系统需要考虑是否会影响保留在企业内部的系统功能。其中IT部门应该起到中介者的角色。</p><p>上述背景引起了新技术的出现，比如基于容器的部署（无服务器计算），使亚秒级计费成为可能，例如 Google “functions”，AWS Lambda。</p><p>使用许可是另一个问题，包括年度许可和永久许可。独立的软件供应商正在研究更适合云的许可模式，如<u>BYOL</u>，<u>完全按需</u>等。</p><p>选择合适的云供应商是另一个挑战。比较不同的云供应商十分耗时，并且难以比较。有人提出，专门平台对各个云平台进行比较，帮助用户进行选择；还有关于市场模型的研究</p><h5 id="研究方向-7"><a href="#研究方向-7" class="headerlink" title="研究方向"></a>研究方向</h5><p>容器的低开销的特性适合实时工作负载，这促进了无服务计算的普及。影响这种功能部署的经济因素，例如：（1）平均交易率与峰值交易率；（2）扩展系统上并发活动的数量，即随着用户数量的增加而运行多个并发功能；（3）基准测试不同后端硬件平台上无服务器功能的执行情况，以及该功能所需的总体执行时间。</p><p>雾计算和边缘计算为云市场带来了更多的供应商和业务模型。这类系统可称为微数据中心MDCs。业务模型包括：动态MDC发现，预先商定的MDC合约，MDC联盟，MDC—CDC交换（用户首选CDC，如果不能满足QoS目标，如延迟，则将计算外包给MDC）</p><p>使用雾计算和边缘计算资源会加剧云环境的不确定性。在不确定的情况下，设计师需要在服务质量和成本之间做出权衡。</p><p>企业内部的IT系统（比如邮件管理）迁移到云上，可能是公司获得更高专业水平的管理（比如网络安全，软件更新，可用性，维护等），但也存在信任相关的问题。从长远来看，这种迁移对风险承受能力和业务连续性意味着什么仍然不清楚。</p><p>边缘分析的相关研究。需要研究什么样的数据应该在边缘处理，什么样的数据在云数据中心处理。这也会影响收入模型。</p><p>18年已经有90多个云供应商（<a href="https://cloudharmony.com/directory" target="_blank" rel="noopener">详见</a>）。</p><blockquote><p>BYOL (bring your own license)<br>marketplace models —— 市场模型<br>Micro Data Centres (MDCs) —— 微数据中心<br>CDC —— 云数据中心</p></blockquote><h4 id="应用部署和交付"><a href="#应用部署和交付" class="headerlink" title="应用部署和交付"></a>应用部署和交付</h4><ul><li>资源的可编程性</li><li>持续传递</li><li>敏捷传递带来的技术债务积累</li></ul><p>资源的可编程性，是开发者能够对基础设施和平台进行编程控制，带来的好处比如让程序能够自动扩展，使程序能够在运行时自动修复、优化等。关键的好处是能够加速产品更新的交付。实现的关键是敏捷交付工具和基于模型的编排语言（比如 Terraform，OASIS TOSCA）。这些工具有助于自动化生命周期管理，包括持续交付和持续集成，应用程序和平台配置以及测试。</p><p>平台可编程性，开发云上的程序时，可以帮助减少软件开发的复杂度。比如用户专注于Map、Reduce任务，由中间件负责容错、任务分配的工作。当前正在研究的编程模型，关注如何处理<strong>云平台的异质性</strong>，比如将程序分布于边缘计算中的各个异质节点。当前缺乏交付框架和编程模型，将程序部署在CDC和边缘节点。因而无法在云应用中使用异构硬件，也无法使用互连云操作。</p><p>另一个挑战是应用程序的发展，加速产品更新交付会影响程序的质量。当前缺少云软件工程的研究，将传统开发和敏捷开发的优点结合。比如记录云程序的所有发行版本的性能和可靠性数据，以便更好地指导产品更新，以及自动识别违反设计模式的行为，并在测试新功能期间探索假设场景</p><h5 id="研究方向-8"><a href="#研究方向-8" class="headerlink" title="研究方向"></a>研究方向</h5><p>敏捷、连续的交付方式，通常是以降低设计质量（如遵循SLA、业务异质性、价值驱动设计）作为代价，比如，在早期设计时决定的架构有错误的风险。挑战之一是，如何在后续的开发中监控和修正云应用程序的设计和质量。目前的研究还局限于，如何定义能解决该挑战的支持方法、高级编程抽象、工具、组织过程。比如需要<u>可重用的抽象</u>来扩展现有的软件开发和交付方法。</p><p>通过<strong>基础设施即代码</strong>，使用连续交付工具自动创建，配置和管理云基础架构，这样的趋势预计将会增长。但任然缺乏专门为编写、调试、发展基础设施即代码而设计的<strong>软件工程方法</strong>。挑战在于，基础设施即代码通常是基于由不同的编程语言和脚本语言组合而成，因此需要更通用的软件质量工程工具。</p><p>专门为云定义新的架构和设计模式，使定义云产品更接近人的思维过程。该架构和模式需要考虑云的运行时的状态、容忍改变（上下文、情况、技术、SLAs）。新的架构和模式需要关注云程序的分解（即微服务），需要考虑这对安全性、性能、可靠性、和运营成本的影响。</p><p>随着无服务计算和FaaS的发展，还需要开发新的整合和控制模式，将传统的外部服务和无服务计算服务结合。比如需要新的模式辅助开发者构建 Cloudlets/swarmlets。这需要研究元控制器，实现在运行时对模型的动态无缝切换。元控制器依赖开发者设计的云软件模型。在这个方向的研究包括：模型驱动引擎，以方便推理、假设分析、监测反馈分析、以及决策。</p><p>还需要对用户的工作负载workload进行定义。关于性能、可靠性、安全性的需求需要本分解，不仅用于表达执行需求，还要能表征程序所处理的数据的属性。</p><p>集成服务的权衡因素有：1，安全性（FaaS，单个功能更易于保护和验证 VS 扩大了攻击面）；2，隐私（FaaS，基于模型的访问控制编排的好处 VS 增加了数据暴露）；3，性能（FaaS，函数级的自动扩展的好处 VS 增大网络流量和延迟）；4，成本（FaaS，单个函数调用更便宜，但提高网络花销）。</p><p>还需要设计编程模型，针对自适应、弹性、可移动、去中心化、分布式程序，提供给雾/边缘计算、互连云、物联网。<strong>功能性程序</strong>应该进行<strong>模块化</strong>的规范、编程、测试和验证。还需要对<u>不确定性程序</u>的正确性的验证和规范，比如在线机器学习算法。对于非功能性方面，可以交由中间件负责，比如容错可以是半透明的，或者有程序进行声明式控制，比如移动设备电量有限的情况下，将计算转移。</p><blockquote><p>CDC —— 云数据中心<br>infrastructure-as-code —— 基础设施即代码<br>meta-controllers —— 元控制器<br>Translucent programming models —— 半透明的编程模型</p></blockquote><h4 id="数据管理"><a href="#数据管理" class="headerlink" title="数据管理"></a>数据管理</h4><ul><li>服务在管理元数据上的局限性</li><li>数据管理策略和规范</li><li>管理对延迟敏感的数据流</li><li>整合流和批量数据</li></ul><p>大数据平台有多种类型，如用于互联网和企业工作负载，采用批处理+NoSQL，如Apache Hadoop；用于物联网，处理分布式数据流，如Apache Storm。</p><p><u>处理元数据（定位和使用数据）的服务</u>对<u>存储数据的服务</u>的支持不够。数据的隐私问题。广域网的延迟较高，从而影响物联网设备对低延迟处理的需求（出现边缘计算和雾计算）。数据中心里各个虚拟机之间的带宽和网络延迟，也会导致瓶颈和影响延迟敏感的数据流的处理。需要的解决方案包括，<strong>软件定义网络</strong>SDN，和<strong>网络功能虚拟化</strong>NFV。</p><p>还需要对Lambda结构的研究，以便在休息和运行时都能处理数据。Apache Flink和Spark Streaming 提供了一些早期方案。大数据系统对在弹性云上自动扩展和收缩的支持不够。</p><h5 id="研究方向-9"><a href="#研究方向-9" class="headerlink" title="研究方向"></a>研究方向</h5><p>缺乏对数据集的<strong>元数据</strong>的管理。与结构化数据仓库不同，“数据湖”的概念鼓励企业将其所有数据放入HDFS等云存储中，以便从中获取知识。但是，由于缺乏描述数据来源的<strong>元数据</strong>，因此很难挖掘数据。科学库对使用元数据有十多年的经验。</p><p>云数据中心对全球数据进行集中管理和计算，有助于安全性，也促了规模经济。但也带来了数据延迟、性能、网络带宽的挑战。而内容分发网络CDN是为变化缓慢的数据设计的（如视频、文件）。并且CDN是向附近对的CDN服务器读取内容，却缺少类似的，在边缘写入数据的机制。</p><p>如何最佳的放置数据处理程序，以及数据流的适配是难点。在此基础上，更大的挑战是如何分配带宽以满足延迟要求。</p><p>支持高级编程抽象的框架，如Apache Bean，简化了使用混合模型的大数据程序的开发和部署，但这是平台绑定的。经过如此，这也已经将常用的分析任务交给边缘资源，也促进了分布式查询。但需要找出放置任务的中间点，以同时最大程度地减少网络资源使用和延迟。另外还要研究管理资源灵活性的方法。</p><p>最后还要研究数据管理服务，以支持物联网、机器学习、区块链。物联网涉及处理流数据、高效存储、云和边缘的无缝合作。</p><p>机器学习（深度学习）的重点是高效管理以训练的模型，以及模型的快速加载和切换，以支持在线分布式分析。训练模型还需要访问大量数据集。</p><p>区块链和分布式帐本，可以改变我们管理和跟踪数据的方式。除了金融行业，它们也可以扩展为通过隐式审计线索以安全的方式存储其他企业数据。</p><blockquote><p>Software Defined Networking (SDN)<br>Network Functions Virtualization (NFV)<br>Scientific repositories —— 科学库<br>Content Distribution Networks (CDN) —— 内容分发网络<br> traffic engineering (TE) —— 流量工程</p></blockquote><h4 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h4><ul><li>高能耗和缺少能源的对称性</li><li>缺少对服务质量的保证</li><li>多重租赁和可扩展性问题</li></ul><p>近年关于云网络的研究有：SDN和NFV，用于构建敏捷、灵活的可编程计算机网络，减少运营支出。还有关于扩展限制、平面空间地址、和服务的过度订阅等问题的研究，促进了一些网络结构的产生，比如VL2, PortLand, and BCube。</p><p>关于网络的挑战之一是如何使<strong>能耗与负载成比例</strong>。大多数网络组件，比如交换机、路由器等硬件本身不支持节能的功能，比如没有通信时休眠，低流量时段的链路速率调整等。</p><p>另一个挑战则关于服务质量的保证。因为没有实现<strong>性能隔离</strong>的机制，导致SLAs没有对比如带宽和延迟的保证。当前的研究有通过网络抽象层VDC<strong>对虚拟机带宽的保证</strong>（<a href="https://dl.acm.org/doi/abs/10.1145/1921168.1921188" target="_blank" rel="noopener">参考文献</a>），但没有<strong>对延迟的保证</strong>。</p><p>在<strong>混合云环境中</strong>部署虚拟集群时，虽然可以通过虚拟化技术解决资源的网络连接问题，但云提供商无法像在其自己的数据中心中那样获得对核心Internet设备的特权访问。因此，云提供商在路由和流量工程方面的灵活性在很大程度上受到限制，<strong>网络性能缺少保证</strong>。</p><p>此外，与专用的数据中心网络相比，诸如Internet之类的公用网络的性能更加不可预测和易变，这使得更难以提供有保证的性能要求。传统的WAN方法，例如用于此类网络中流量工程的多协议标签交换MPLS，由于缺乏<strong>网络全局视图</strong>，因此在带宽使用和处理对延迟敏感的流量方面也效率不高（<a href="https://dl.acm.org/doi/abs/10.1145/2486001.2486012" target="_blank" rel="noopener">参考文献</a>）。 </p><p>由于现代云数据中心的网络规模很大，因此它也同样面临着和互联网相似的问题，比如VLAN的限制，VXLAN在多播中的限制，IPV4的限制等。</p><h5 id="研究方向-10"><a href="#研究方向-10" class="headerlink" title="研究方向"></a>研究方向</h5><p>软件定义网络SDN的特征有：全局网络视野、可编程性、开放性，这些特征提供了一种研究方向，基于SDN的流量工程TE机制，应用于云数据中心网络内外。通过SDN，<strong>流量工程</strong>能更高效、智能的处理<u>动态流</u>的调度和管理。因此需要针对SDN的特性设计新的流量工程方法。</p><p>SDN可能影响云的安全性和隐私问题。虽然社区普遍认为SDN能改善网络层和应用层的安全性、可靠性，比如通过策略实施（防火墙、访问控制、中间盒），DoS攻击探测和缓解，细粒度的入侵监控，流量异常探测。但是，SDN会给范式带来改变，从而给<u>网络本身或部署在SDN网络上的服务和相关用户</u>带肋威胁。比如对SDN控制器进行单点攻击。现有的威胁也可能因此扩大，比如网络转发设备被劫持，导致影响范围扩大。</p><p>SDN技术的最新进展有望通过<u>使网络可编程</u>，并减少云提供商的资金和运营支，出来简化数据中心内部网络。但是需要进一步研究，当前用于互连云环境的方法的有效性，以及如何通过公共通信渠道使用SDN。</p><p>迄今为止，在满足应用程序的QoS要求的同时，几乎没有对虚拟网络功能（VNF）的放置和整合给予任何关注。服务链中的VNF的自动扩展也需要深入关注。VNFs提供的网络功能的性能变化受到多种因素影响，比如服务负载，底层主机过载。因此需要开发自动扩展机制，监视VNF实例的性能，并动态增减实例数量。流量工程、迁移技术、VNF放置，3种技术组合可以降低到网络通信成本。此外，自动扩展技术还应该根据服务链（而不是单个服务器）对VNF进行扩展，。</p><p>AI、ML、大数据分析在处理云计算的<u>网络</u>挑战和<u>自动化</u>方面有巨大潜力。</p><p>连接数十亿个均生成数据的设备的物联网的出现将对网络基础设施提出重大需求。随着移动设备数量的爆炸式增长，5G无线及其带宽的增加也将迫使网络容量显着扩展。尽管解决延迟和降低网络资源使用率的关键策略是边缘 / 雾计算，但是边缘/雾计算本身不足以满足所有网络需求。为了满足这种过渡的需求，需要新的产品和技术来扩展网络的带宽或承载能力，以及更快的宽带技术和光网络的进步。也需要进一步研究边缘计算和雾计算与5G的集成。</p><blockquote><p>Multi-Protocol Label Switching (MPLS) —— 多协议标签转换<br>middleboxes —— 中间盒<br>traffic anomaly detection —— 流量异常探测<br>paradigm —— 范式</p></blockquote><h4 id="可用性"><a href="#可用性" class="headerlink" title="可用性"></a>可用性</h4><ul><li>HCI和分布式系统社区的差距</li><li>基础设施和服务的封装</li><li>生产力工具</li></ul><p>可用性是降低组织探索云服务和基础架构成本的关键因素，因为用户可以拥有更好的服务质量并提高生产力，从而减少人工支出。</p><p>云的可用性被NIST的可用性框架中突出为5个方面：能力、个人、可靠、安全、价值（<a href="https://link.springer.com/chapter/10.1007/978-3-319-20376-8_59" target="_blank" rel="noopener">参考文献</a>）。能力，与满足云消费者对云服务功能的期望有关。 个人，是允许用户和组织更改用户界面的外观和风格并自定义服务功能。 可靠，安全和价值，是与使系统在状态条件下安全、受保护地执行其功能，并分别将价值（结果）返回给用户。</p><p>对于可用性，当前的工作主要集中在将复杂的服务封装到API中，以方便用户使用，比如HPC云，研究者一直在创建服务来公开HPC应用程序，以简化其使用。</p><p>另一个方向是DevOps，它的目标是将开发（Dev）和操作（Ops）集成在一起，从而帮助更快地交付软件。在云环境中创建和部署解决方案时，DevOps提高了开发人员和运营商的生产力。 不仅要在云中构建新的解决方案，而且要简化从内部部署环境到多租户弹性云服务的旧软件迁移。</p><h5 id="研究方向-11"><a href="#研究方向-11" class="headerlink" title="研究方向"></a>研究方向</h5><p>有许多机会可以提高云环境中的可用性。例如，由于工作量/资源的波动或特性，用户仍然很难知道他们将花多少钱租用资源。具有更好估计的工具肯定会改善用户体验和满意度。由于大数据社区的最新需求，可以在云环境的不同层上进一步探索新的可视化技术，以更好地了解基础设施和应用程序行为，并向最终用户见解。</p><p>此外，用户仍然无法使用可用于运行其应用程序的资源和服务类型。资源和服务包括CPU，GPU，网络，存储，操作系统，以及PaaS中可用的所有服务。<strong>咨询系统</strong>将大大增强用户使用云资源和服务的体验，还可以建议用户应如何更有效地使用云。比如建议用户读数据进行远程传输或可视化，是否应该分配或删除资源，是否应将裸机替换为虚拟机等建议，以使Cloud易于使用且更具成本效益。</p><p>这方面的主要困难在于评估。在复杂庞大的云上，大规模设计和执行实验并非易事。</p><blockquote><p>capable, personal, reliable, secure, and valuable<br>High Performance Computing (HPC) —— 高性能计算</p></blockquote><h3 id="新兴的趋势和影响范围"><a href="#新兴的趋势和影响范围" class="headerlink" title="新兴的趋势和影响范围"></a>新兴的趋势和影响范围</h3><h4 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h4><p>Docker的诞生引起了各界对容器技术的关注。</p><p>容器依赖于现代Linux的内核设施，比如 cgroups, LXC (Linux containers) and libcontainer。Docker使用Linux核心的cgroups和命名空间来运行独立的容器。cgroups提供资源的隔离（如CPU、内存、网络、block I/O）。命名空间从程序的角度隔离操作环境（包括进程树、网络、用户ID、挂载文件系统）。libcontainer库作为<u>容器引用实现</u>。并将程序和相关依赖打包到容器镜像中。</p><p>容器技术在行业中的普及，促进了对容器即服务（CaaS）的需求，比如UberCloud。</p><p>容器的两大特点，一是启动速度快，甚至能低于1秒；二是容器对内存的占用量很小，消耗的资源很少。</p><p>容器的缺点是由于共享内核，因此隔离和安全比VM差（这是其中一个研究热点）。解决该问题的可能方案之一是<strong>硬件支持</strong>，比如Intel SGX的受信执行支持；二是使用Unikernel，是一种库操作系统。</p><p>容器技术的挑战是如何最优化容器性能，比如<strong>Slack技术</strong>对存储驱动最佳化，来加速容器启动。还有基于用户服务质量需求的容器集群管理，比如容器集群管理系统，Kubernetes，Mesos 和 Swarm。</p><blockquote><p>mounted file systems —— 挂载文件系统<br>container reference implementation —— 容器引用实现<br>trusted execution support of Intel SGX</p></blockquote><h4 id="雾计算"><a href="#雾计算" class="headerlink" title="雾计算"></a>雾计算</h4><p>雾计算是传统云计算模型的扩展。雾计算包括3个方面，一是使路由节点（如移动基站、网关、路由器等）执行通用目的计算；二是为路由节点添加计算能力，对传输数据进行处理；三是结合前2者。</p><p>好处之一是<strong>减少延迟</strong>，改进流式应用和实时应用的服务质量。二是<strong>位置感知</strong>。三是<strong>无缝支持可移动性</strong>，可以启用用户设备和计算服务器之间的无线访问，并可以组织可伸缩的控制系统。这些好处都适用于IoT应用。</p><p>雾计算和边缘计算的不同在于，<strong>边缘计算</strong>将计算能力提供给了IoT设备本身，而<strong>雾计算</strong>的计算节点（Dockers、VMs）则是靠近数据源。<strong>边缘计算需要IoT设备有执行代码和通信的能力，问题在于这样的接口并没有被所有的IoT设备采用</strong>。因此，雾计算似乎是迄今为止唯一可行/通用的解决方案。</p><p>雾计算尽管不能完全作为CDC，但也提供完整的IaaS，PaaS和SaaS资源堆栈。它的主要好处在于能减少延迟，预计每个城市只需要少数几个雾数据中心。从商业角度，还能使用私有云或独立的雾供应商的基础设施作为雾节点。对于<strong>移动边缘计算</strong>，它基于移动蜂窝网络，而不经过传统雾计算的路由节点</p><p>雾计算的优点包括，应用在不同计算层之间的<strong>垂直扩展性</strong>：它允许对<strong>传输数据进行提前处理</strong>，从而只有必要的流量会被发送到云数据中心。<strong>工作负载</strong>也可从云中分解下发到雾节点上，或者从边缘节点向上迁移到雾节点。在雾节点中可以使用更轻量的<strong>容器</strong>代替虚拟机。</p><p>云服务提供商已经开始建议客户使用它们提供的云接口来部署应用的存储和计算功能，以方便将来的雾节点迁移。云供应商已经开始使用边缘位置来提供<strong>更接近用户的安全服务</strong>（AWS Shield, Web Applica- tion Firewall Service）和<strong>网络流量修改</strong>（Lambda@Edge）</p><p>能够从雾计算中受益的还有智慧城市、物联网应用、多维数据（文字、音频、视频）采集、深度学习模型的在线训练和实时决策（交通信号）、无人汽车、无人机、计算和数据归档、沉浸式环境（MMORPG）、3D环境（HoloLens、Google Glass）、机器人手术。</p><p>挑战之一是<strong>与多方服务级别协议SLAs有关</strong>的复杂的管理问题，这关系到开发统一的可互操作的管理平台（<a href="https://www. edgexfoundry.org/">EdgeX Foundry项目</a>）。多个雾节点之间交互的可能性，涉及安全和隐私问题（<a href="https://www.openfogconsortium.org/" target="_blank" rel="noopener">Open Fog财团</a>）。</p><blockquote><p>MMORPG —— 大型多人在线角色扮演</p></blockquote><h4 id="大数据"><a href="#大数据" class="headerlink" title="大数据"></a>大数据</h4><p>大量的流数据（物联网传感器、CPS、社交网络）是人们对数据量Volume的关注转移到数据速度Velocity。比如in-memory处理数据的Spark Streaming、Flink、Kafka。</p><p>视频数据（城市监控、无人驾驶、无人机）在增长，但云计算中心的延迟和带宽有限。</p><p>与结构化数据仓库不同，“数据湖”鼓励企业将数据放到云中，但缺少对数据来源进行描述的元数据，导致数据难以被使用。</p><blockquote><p>streaming data —— 流数据<br>Cyber Physical Systems (CPS)</p></blockquote><h4 id="无服务器计算"><a href="#无服务器计算" class="headerlink" title="无服务器计算"></a>无服务器计算</h4><p>无服务器计算（功能即服务FaaS，后端即服务BaaS）是一种新兴的架构模型，极大的改变云计算应用的设计方式。与传统的三层模型（应用逻辑和数据库服务器都在云端）不同，无服务器程序的业务逻辑被迁移到了客户端，<strong>比如嵌入到app中，或者在临时分配的资源上</strong>。它的好处是不需要租用资源（如虚拟机）作为服务器运行程序。该模型隐式的处理了在VM上部署应用的挑战，如工作负载中平衡，可靠性、容错等，但也需要考虑平时不考虑的问题，如控制、灵活性、成本。</p><p>无服务器的意思是指，程序运行所需的资源由云供应商管理（而不再是由开发者租用服务器并自己管理）</p><p>无服务器计算减少了开发者的后端代码量、以及对云资源的管理。</p><p>相关的供应商有AWS Lambda，IBM OpenWhiskand，Google Cloud Functions。</p><p>在BaaS中，服务器端的逻辑由不同的云服务负责（如认证、数据库访问、消息传递）；而FaaS则使用短暂的计算资源，按访问次数计费。</p><p>FaaS中的挑战在于，云在执行功能（代码）前并不知道它所需的资源。为此，云供应商对函数的作用和执行时间有许多限制。这也在软件工程方面产生了新的挑战，需要重新设计应用程序结构以适用于该模型。尽管这会带来一些改变，比如要求程序无状态，但却能提高灵活性。与该模型相关的挑战还有<strong>基于事件的</strong>和<strong>超时感知的</strong>程序逻辑。前者是因为每个功能都能看做是对一个事件的独立响应，该事件还会触发其他事件来获取响应。后者是无服务器计算对函数的运行时间有限制，因此在设计函数时需要考虑超时问题，比如如何规避，和处理超时。</p><p>现在还没有一个成熟的<strong>通用目的</strong>的无服务器计算架构，尤其是在中间件层。</p><blockquote><p>serverless computing —— 无服务器计算</p></blockquote><h4 id="软件定义的云计算"><a href="#软件定义的云计算" class="headerlink" title="软件定义的云计算"></a>软件定义的云计算</h4><p>软件定义的云计算是一种方法，通过将虚拟化的概念扩展到数据中心的所有资源上（如计算、存储、网络），对<u>配置过程和物理资源抽象</u>的自动化和最佳化。<strong>虚拟化技术的目的是掩盖、抽象和透明地使用底层资源，而不需要程序和用户了解资源的属性</strong>。虚拟化技术在计算和存储方面已经有很大突破，当前的趋势是<strong>云的网络方面的虚拟化</strong>，即软件定义网络SDN和网络功能虚拟化NFV。</p><p><strong>软件定义网络SDN</strong>，动机是对敏捷的和高性价比的计算机网络需求，该网络还支持多重租赁。SDN主要目的是克服传统网络的限制，尤其是在多重租赁环境中，云数据中心需要提供资源，并保证资源之间相互独立、隔离。早期的CDN支持者认为网络设备的制造商不能满足他们的创新需求，还有一人则旨在通过利用商品硬件的低成本处理能力来运行其网络。</p><p>SDN将数据转发和网络控制解耦，使网络可被中心化管理和可编程。这样的拆分通过称为CDN控制器的软件，提高了<u>在逻辑上中心化网络的网络编排</u>的灵活性。SDN控制器提供了与供应商无关的开放标准（如OpenFlow），该标准为应用程序和网络服务抽象了基础结构。</p><p><strong>网络功能虚拟化NFV</strong>，是<u>网络连接</u>的另一个趋势，它将网络功能（如入侵检测、负载平衡、防火墙、网络地址翻译NAT、域名服务DNS等）从专用硬件转移到基于软件的应用上，能够在商业的架外（COTS）设备上执行。</p><p>网络服务链接，也称为<strong>服务功能链接（SFC）</strong>，是网络运营商用来建立互连的网络服务链的自动化过程。 SFC通过实例化在商品硬件上运行的纯软件服务，可以在NFV环境中组装虚拟网络功能（VNF）链。NFV环境的管理和编排是另一研究方向。</p><p>除了网络连接上的挑战，SDN和NFV还与可持续性、相互关联的云、安全性有关，比如通过OpenFlow交换机实现了可持续性，并提供了网络能耗比例（<a href="https://www.usenix.org/legacy/event/nsdi10/tech/full_papers/heller.pdf" target="_blank" rel="noopener">参考文献</a>）。</p><p>NFV的主要优点是能够让云供应商以更敏捷和灵活的方式提供网络功能服务。比如基于虚拟网络函数实例的迁移策略，减少能耗的整合算法（<a href="https://ieeexplore.ieee.org/abstract/document/7866881" target="_blank" rel="noopener">参考文献</a>）</p><blockquote><p>Software-defined networking (SDN)<br>Network functions virtualization (NFV).<br>multi-tenancy —— 多重租赁<br>data forwarding functions —— 数据转发功能<br>commercial off-the-shelf (COTS) equipment<br>network address translation (NAT)<br>domain name service (DNS)<br>service function chaining (SFC) —— 服务功能链接<br>virtual network functions (VNFs)</p></blockquote><h4 id="区块链"><a href="#区块链" class="headerlink" title="区块链"></a>区块链</h4><p>区块链有可追溯性、可靠性和可审计性的特点。区块链由不可改变的分布式账本ledger组成，账本分布在去中心化的网络上，账本的安全性依赖于密码学。链上的不同对象有账本的相同备份，且区块链上发生的事务需要得到所有对象的同意。</p><p>云计算对区块链的促进作用，不仅是可以持有区块链节点，还能创建服务来利用区块链。云可以将区块链服务封装到PaaS和SaaS上，来促进使用。但这也导致了可扩展性的问题。</p><p>除此之外，云在动态部署计算资源和管理存储上的特点，也是促进区块链被广泛采纳的重要因素。区块链的一个重要组件是作为平台对事务数据进行分析，而这可以和其他来源的数据混合，比如IoT、金融、天气等。</p><p>当前区块链的许多事务都是在云外发送的，如果将区块链转移到云上，那么会增大数据中心的负载，因此导致可持续性问题（主要是能耗）。负载不仅是事务本事，还包括相关的分析服务。因此，在云中处理区块链服务还需要高效的基础设施，以及满足动态的计算需求。</p><p>另一方面是区块链对云计算的促进作用。云是一个关于合作和数据交换的平台，而区块链可以构建一个更安全、可审计的事务平台。区块链和云计算可一起构建一个可信任的、可验证的数据市场，以高效的、可靠、可审核的方式交易数据。背后的原因是数据能够从AI/ML中产生价值。该领域涉及可扩展性、验证数据质量/有用性的机制、以及促进这类<u>区块链感知的数据交易机制</u>的可用性工具。</p><blockquote><p>cryptography —— 密码学</p></blockquote><h4 id="机器学习和深度学习"><a href="#机器学习和深度学习" class="headerlink" title="机器学习和深度学习"></a>机器学习和深度学习</h4><p>机器学习有助于云的资源管理的最优化，而云的计算资源（按需使用、易访问性）对机器学习服务也十分关键。</p><p><strong>自动化计算</strong>，旨在通过自动化提高计算系统的效率，它包括4个主要特征：自配置、自优化、自愈、自保护。AI的出现让这成为可能。对于云来说，这意味着以高效的方式管理工作负载、预测计算需求、估计SLA违反行为、更好的工作分配决策等。</p><p>业界已经开始为许多云服务提供<strong>自动调整技术</strong>，将运行应用程序堆栈委派给云平台，比如Azure SQL能够自动调整和清洗索引。该领域的其中一个研究方向是在机器学习的解决方案中，创建在不同环境下可重用的模型，而不是每次都从新创建模型。问题在于程序和服务本身的特点可能导致无法直接使用其他公司的资源优化方案。</p><p>云计算还能以灵活的方式为机器学习提供大规模计算资源，并且支持以大规模并行的方式训练模型。提供AI服务的平台有：IBM Watson，Microsoft Azure Machine Learning，AWS Deep Learning AMIs，Google Cloud Machine Learning Engine。</p><p>在未来，自动调整技术可能被大规模采纳（尤其是对SaaS）。此外还有，新的自动化工具的出现（半自动应用程序构建器——推荐成功案例的配置、自动化数据库分片、查询优化、智能负载平衡、服务的复制器）、基于机器学习的安全性云服务</p><blockquote><p>autonomic computing —— 自动化计算<br>auto-tuning —— 自动调整</p></blockquote><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>跨云计算的所有服务模型（IaaS，PaaS和SaaS）将有重大发展。</p><p>在IaaS中，可以使用异构硬件（例如CPU和加速器（例如GPU和TPU））以及用于特定应用（例如HPC和深度学习）的专用云。下一代云还应该准备好接受非传统的体系结构，例如神经形态，量子计算，绝热，纳米计算等。此外，诸如容器化，SDN和Fog / Edge计算等新兴趋势将扩大研究范围。 IaaS突飞猛进。还讨论了通过利用可再生能源和基于IoT的冷却系统来解决CDC可持续性的解决方案。IaaS的新兴趋势也存在很大的余地，例如分解的数据中心，其中计算任务（例如CPU，内存和存储）所需的资源将被构建为独立的资源片，这将允许更快，更理想的资源供应来满足基于云的应用程序的不同QoS要求。为解决可伸缩性，资源管理和调度，异构性，互连云和网络挑战而提出的未来研究方向，应该能够实现由云提供的这种全面的IaaS。</p><p>同样，PaaS应该通过未来在资源管理和调度方面的研究方向取得重大进展。提出了对支持可伸缩的弹性计算和无缝使用异构资源的编程抽象，模型，语言和系统的需求，从而提高了能效，最小化了应用工程成本，提高了可移植性并确保了可靠性和性能水平。可以预见的是，对机器学习，深度学习和AI应用程序的持续热度将有助于处理通过PaaS开发的复杂性，异构性，规模和负载平衡应用程序。无服务器计算是PaaS的新兴趋势，这是一个有重大实际和经济影响的有希望探索的领域。提出了有趣的未来方向，例如功能级QoS管理和无服务器计算的经济性。此外，还将详细讨论数据管理和分析的未来研究方向以及安全性，从而为基于IoT和智能城市领域的实时流数据处理的边缘分析等具有平台支持的有趣应用提供支持。</p><p>SaaS应该主要从应用程序开发和交付以及云服务的可用性方面看到进步。需要透明的编程模型，语言和API，以解决应用程序开发的复杂性，同时允许控制将应用程序交付给下一代Cloud。在云应用程序开发期间，越来越多地采用了各种敏捷交付工具和云标准（例如，TOSCA）。未来的研究应集中在如何持续监视和迭代地发展云应用程序的设计和质量上。还建议扩展DevOps方法并定义新颖的编程抽象，以将其包括在现有软件开发和交付方法中，以支持IoT，边缘计算，大数据和无服务器计算。重点还应该放在开发有效的云设计模式和形式主义的开发上，以描述强烈鼓励应用程序处理的工作负载和工作流程，以及它们在性能，可靠性和安全性方面的要求。有趣的是，尽管技术已经成熟，但某些领域（例如移动云）仍然存在适应性问题。移动云的适应性以及设计Fog架构都需要新颖的激励机制。</p><p>因此，今后的研究应探讨云计算架构和市场模式，拥抱不确定性，并提供连续的“双赢”的决议，对于所有的参与者，包括供应商，用户和中介机构，无论是从收益上的投资回报率（ROI），并满足SLA的观点。</p><h3 id="相关术语"><a href="#相关术语" class="headerlink" title="相关术语"></a>相关术语</h3><p>&gt;</p><blockquote><p>non-volatile technologies —— 非易失性技术<br>Ad-hoc —— 特设的<br>offloading —— 分流<br>proportionality —— 对称性</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;云计算和按需付费模型的出现，让用户可以随时随地获得基于订阅的服务。这带来的好处包括：更短的启动时间；创建可扩展的全球企业程序；给科学计算和高性能计算带来更好的成本价值关联；以及为无处不在的普适程序带来不同的调用/执行模型。&lt;/p&gt;
&lt;p&gt;另一方面，无服务计算、软件定义网络、物联网、边缘计算等新技术为云计算带来了机遇，但也同时带来了新的挑战，对新方法和研究策略的需求。对于解决可扩展性、灵活性、可靠性、安全性、可持续性等问题的模型，也需要重新进行评估。&lt;/p&gt;
&lt;p&gt;该文献将定义云计算中的主要的开放性挑战，调查最新的解决方案和它们的局限。接 着讨论新兴的趋势和影响范围，以及它们如何推动未来云计算的挑战。据此再进一步讨论云计算的未来，并指出下一个十年的研究方向。&lt;/p&gt;
    
    </summary>
    
    
      <category term="云计算" scheme="https://liaoooyx.com/categories/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
      <category term="读书笔记" scheme="https://liaoooyx.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="云计算" scheme="https://liaoooyx.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
    
      <category term="云计算" scheme="https://liaoooyx.com/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>云计算大纲</title>
    <link href="https://liaoooyx.com/2020/03/%E4%BA%91%E8%AE%A1%E7%AE%97/00%20%E4%BA%91%E8%AE%A1%E7%AE%97%E5%A4%A7%E7%BA%B2/"/>
    <id>https://liaoooyx.com/2020/03/%E4%BA%91%E8%AE%A1%E7%AE%97/00%20%E4%BA%91%E8%AE%A1%E7%AE%97%E5%A4%A7%E7%BA%B2/</id>
    <published>2020-03-27T00:00:00.000Z</published>
    <updated>2020-04-17T12:36:14.148Z</updated>
    
    <content type="html"><![CDATA[<ol><li>分布式系统模型和支持技术</li><li>云计算–体系结构，服务，模型，用例</li><li>公共云和私有云。 资源管理</li><li>集群和数据中心的虚拟机和虚拟化</li><li>虚拟基础架构管理：OpenNebula和Openstack</li><li>云调度</li><li>容器化和Kubernetes</li><li>云编程和软件环境</li><li>云中间件和配置管理</li><li>大数据。 Mapreduce和Hadoop</li><li>服务水平协议</li><li>云经济</li><li>能源效率</li><li>安全与信任</li><li>无处不在的云和物联网</li><li>云支持：边缘计算，虚拟化/单核，工业4.0，无服务器架构</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;分布式系统模型和支持技术&lt;/li&gt;
&lt;li&gt;云计算–体系结构，服务，模型，用例&lt;/li&gt;
&lt;li&gt;公共云和私有云。 资源管理&lt;/li&gt;
&lt;li&gt;集群和数据中心的虚拟机和虚拟化&lt;/li&gt;
&lt;li&gt;虚拟基础架构管理：OpenNebula和Openstack&lt;/li&gt;
      
    
    </summary>
    
    
      <category term="云计算" scheme="https://liaoooyx.com/categories/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
    
  </entry>
  
  <entry>
    <title>云计算的新方向1</title>
    <link href="https://liaoooyx.com/2020/03/%E4%BA%91%E8%AE%A1%E7%AE%97/17%20IoT%E7%89%A9%E8%81%94%E7%BD%91/"/>
    <id>https://liaoooyx.com/2020/03/%E4%BA%91%E8%AE%A1%E7%AE%97/17%20IoT%E7%89%A9%E8%81%94%E7%BD%91/</id>
    <published>2020-03-27T00:00:00.000Z</published>
    <updated>2020-04-01T15:50:31.883Z</updated>
    
    <content type="html"><![CDATA[<p>云计算、物联网、社交网络影响着整个服务行业，也因此关系着未来互联网的演变和全球的经济。</p><p>云的生态系统需要普适性、高效性、安全性、用户接受性和值得信赖。</p><p>云是塑造未来互联网的关键：物联网和社交网络正参与着商业、政府、教育、娱乐等的各个方面</p><p><strong>《BIG SWITCH》描述了21世纪初出现的转变：</strong></p><p>更强大的电脑；无限的存储；高带宽的网络和普遍的连接（TB级的网络、宽带无线移动）；行业竞相建立大型数据中心（容量）；虚拟化有助于实现规模经济</p><p><strong>未来的网络开发存在以下技术挑战：</strong></p><p>可编程的网络结构；合并互联网、移动网络、和TV网络；基于TCP/IP的实名数据网络；智能路由和内容分布；加强安全和隐私保护</p><a id="more"></a><h4 id="云在未来互联网和社交网络中的角色"><a href="#云在未来互联网和社交网络中的角色" class="headerlink" title="云在未来互联网和社交网络中的角色"></a>云在未来互联网和社交网络中的角色</h4><p>在未来，云将会是提供网络服务的基础。未来的互联网不仅包含人和机器，还包括任何的对象或物体（物联网）</p><p>物联网的兴起：物理网应用程序必须最大化使用云，以便动态的处理和存储大规模的数据</p><p>云、物联网和社交网络正在重塑人类之间的关系，影响我们的日常生活，并且影响着全球的经济、政治系统</p><h4 id="物联网究竟意味着什么"><a href="#物联网究竟意味着什么" class="headerlink" title="物联网究竟意味着什么"></a>物联网究竟意味着什么</h4><p>Kevin Ashton将“物联网”描述为一个系统，它通过无处不在的传感器将物理世界和互联网联系在一起</p><blockquote><p>无处不在的传感器：手机、汽车、房间、门、床、椅子、建筑等任何物体</p></blockquote><h4 id="挑战"><a href="#挑战" class="headerlink" title="挑战"></a>挑战</h4><p>所有的传感器和控制端都在不断产生数据。通常这些数据是有用且私密的。因此需要一个系统来使这些设备相互沟通、管理数据，并加强适当的访问控制</p><p>而所有的通信、管理、访问控制技术，都是应用在大规模的设备网络上，因此必须是<u>可大规模扩展的</u></p><h4 id="开放协议"><a href="#开放协议" class="headerlink" title="开放协议"></a>开放协议</h4><p>当前的互联网和软件的解决方案有：</p><ul><li>接口 API：高度模块化</li><li>云：高度的分布式</li><li>面向服务的体系结构 SOA：高度解耦</li></ul><h4 id="物联网的维度"><a href="#物联网的维度" class="headerlink" title="物联网的维度"></a>物联网的维度</h4><p>任何时间相连：移动时、户内户外、白天晚上</p><p>任何地点相连：移动时、户外、户内（不在电脑上）、电脑上</p><p>任何物体相连：电脑之间、人与人（不使用电脑）、人与物（使用通用设备）、物与物</p><h4 id="无线传感器的角色"><a href="#无线传感器的角色" class="headerlink" title="无线传感器的角色"></a>无线传感器的角色</h4><p>无处不在的计算将促进各种各样的无线应用程序，包括监控宠物和家里的植物、控制程序、追踪书籍和单车等</p><h4 id="物联网的结构"><a href="#物联网的结构" class="headerlink" title="物联网的结构"></a>物联网的结构</h4><p>应用层：商品追踪、环境保护、智能搜索、远程医疗、智能交通、智能家居</p><p>网络层：云计算平台 —— 移动电信网、物联网、信息网</p><p>服务层：射频识别技术（射频标签）、传感器网络（节点）、GPS（公路地图）</p><p><img src="https://tva1.sinaimg.cn/large/00831rSTgy1gd900m538xj311e0l80x3.jpg" alt="截屏2020-03-27 下午5.27.30" style="zoom:50%;" /></p><h4 id="概念图：基于云的物联网"><a href="#概念图：基于云的物联网" class="headerlink" title="概念图：基于云的物联网"></a>概念图：基于云的物联网</h4><p>无缝连接/无处不在的访问 —— 云计算 —— 基于云的物联网</p><p><img src="https://tva1.sinaimg.cn/large/00831rSTgy1gd9098ew80j30og0ie0vt.jpg" alt="截屏2020-03-27 下午5.35.49" style="zoom:50%;" /></p><h4 id="本地的分布式云"><a href="#本地的分布式云" class="headerlink" title="本地的分布式云"></a>本地的分布式云</h4><p>公有云：公开资源管理、服务质量管理、服务创新、准入控制</p><p>网络：地点管理、服务呈现、计费、身份管理、服务支持功能</p><p>本地云：本地资源管理、公有云交互</p><p>物体：资源请求、资源呈现</p><p><img src="https://tva1.sinaimg.cn/large/00831rSTgy1gd90e2iwt8j30kq0j8tds.jpg" alt="截屏2020-03-27 下午5.40.26" style="zoom:50%;" /></p><h4 id="射频识别技术-RFID"><a href="#射频识别技术-RFID" class="headerlink" title="射频识别技术 RFID"></a>射频识别技术 RFID</h4><blockquote><p><a href="https://baike.baidu.com/item/%E5%B0%84%E9%A2%91%E8%AF%86%E5%88%AB%E6%8A%80%E6%9C%AF/9524139" target="_blank" rel="noopener">百度百科</a>：无线射频识别技术通过<a href="https://baike.baidu.com/item/无线电波/942435" target="_blank" rel="noopener">无线电波</a>不接触快速信息交换和存储技术，通过无线通信结合数据访问技术，然后连接数据库系统，加以实现非接触式的双向通信，从而达到了识别的目的，用于数据交换，串联起一个极其复杂的系统。在识别系统中，通过电磁波实现电子标签的读写与通信。根据通信距离，可分为近场和远场，为此读/写设备和电子标签之间的数据交换方式也对应地被分为负载<a href="https://baike.baidu.com/item/调制/4803375" target="_blank" rel="noopener">调制</a>和反向散射调制。</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/00831rSTgy1gd90svv6dzj311y0j8dlx.jpg" alt="截屏2020-03-27 下午5.54.38" style="zoom:50%;" /></p><h5 id="应用场景：物流分配中心"><a href="#应用场景：物流分配中心" class="headerlink" title="应用场景：物流分配中心"></a>应用场景：物流分配中心</h5><ol><li>通过RFID指示包裹的输送方向</li><li>通过RFID读取仓库中的库存或在运输中的包裹，同步到系统上，从而与供应链同步</li><li>通过RFID识别集装箱内的包裹，更新库存</li></ol><p><img src="https://tva1.sinaimg.cn/large/00831rSTgy1gd914qqp3tj30zw0k8qp8.jpg" alt="截屏2020-03-27 下午6.06.03" style="zoom:50%;" /></p><h4 id="无线网络——支持普适计算"><a href="#无线网络——支持普适计算" class="headerlink" title="无线网络——支持普适计算"></a>无线网络——支持普适计算</h4><blockquote><p><a href="https://baike.baidu.com/item/%E6%99%AE%E9%80%82%E8%AE%A1%E7%AE%97" target="_blank" rel="noopener">百度百科</a>：<strong>普适计算</strong>（Ubiquitous computing（ubicomp）、pervasive computing），又称<strong>普存计算</strong>、<strong>普及计算</strong>、<strong>遍布式计算</strong>、<strong>泛在计算</strong>，是一个强调和环境融为一体的计算概念，而<a href="https://baike.baidu.com/item/计算机/140338" target="_blank" rel="noopener">计算机</a>本身则从人们的视线里消失。在普适计算的模式下，人们能够在任何时间、任何地点、以任何方式进行信息的获取与处理。</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/00831rSTgy1gd91bg1jhpj310y0fw12e.jpg" alt="截屏2020-03-27 下午6.12.32"></p><h4 id="ZigBee-结构"><a href="#ZigBee-结构" class="headerlink" title="ZigBee 结构"></a>ZigBee 结构</h4><p>目的：监控和控制；电池：3个月-3年；网络数量：无限 ；带宽：20-150KB；范围：1-100+米；系统资源：4-32K</p><ul><li>全功能设备 FFD —— <ul><li>协调器 (ZigBee Coordinator, ZC)：<ul><li>一个ZB网络只需要1个协调器，发起网络</li><li>作为 802.15.4 2003 协议的协调器</li><li>当网络成型后，也能作为路由器</li></ul></li><li>路由器 (ZigBee Router, ZR)<ul><li>可选的组件，辅助ZC，对消息进行多跳路由</li></ul></li></ul></li><li>缩减功能设备 RFD<ul><li>终端设备 (ZigBee End Device, ZED)<ul><li>可选的网络组件</li><li>不参与路由</li></ul></li></ul></li></ul><p><img src="https://tva1.sinaimg.cn/large/00831rSTgy1gd91m4qv31j30o60gwwjc.jpg" alt="截屏2020-03-27 下午6.22.47" style="zoom:50%;" /></p><h4 id="物联网中的云和大数据，5C-5ANY"><a href="#物联网中的云和大数据，5C-5ANY" class="headerlink" title="物联网中的云和大数据，5C+5ANY"></a>物联网中的云和大数据，5C+5ANY</h4><p>数据：存储在云中，跟随着用户和用户的设备，可随时随地访问，可被其他人共享</p><p>5C：Convergence、Contents、Computing、Communication、Connectivity</p><p>5Any：Any Time、Any Where、Any Service、Any Network、Any Object</p><h4 id="相关名词"><a href="#相关名词" class="headerlink" title="相关名词"></a>相关名词</h4><blockquote><p>Telecom —— 电信<br>RFID: Radio Frequency Identification Technology —— 射频识别技术<br>Antenna —— 天线</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;云计算、物联网、社交网络影响着整个服务行业，也因此关系着未来互联网的演变和全球的经济。&lt;/p&gt;
&lt;p&gt;云的生态系统需要普适性、高效性、安全性、用户接受性和值得信赖。&lt;/p&gt;
&lt;p&gt;云是塑造未来互联网的关键：物联网和社交网络正参与着商业、政府、教育、娱乐等的各个方面&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《BIG SWITCH》描述了21世纪初出现的转变：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;更强大的电脑；无限的存储；高带宽的网络和普遍的连接（TB级的网络、宽带无线移动）；行业竞相建立大型数据中心（容量）；虚拟化有助于实现规模经济&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;未来的网络开发存在以下技术挑战：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可编程的网络结构；合并互联网、移动网络、和TV网络；基于TCP/IP的实名数据网络；智能路由和内容分布；加强安全和隐私保护&lt;/p&gt;
    
    </summary>
    
    
      <category term="云计算" scheme="https://liaoooyx.com/categories/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
    
      <category term="IoT" scheme="https://liaoooyx.com/tags/IoT/"/>
    
      <category term="物联网" scheme="https://liaoooyx.com/tags/%E7%89%A9%E8%81%94%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>云计算的新方向2</title>
    <link href="https://liaoooyx.com/2020/03/%E4%BA%91%E8%AE%A1%E7%AE%97/18%20%E4%BA%91%E8%AE%A1%E7%AE%97%E7%9A%84%E6%96%B0%E6%96%B9%E5%90%91/"/>
    <id>https://liaoooyx.com/2020/03/%E4%BA%91%E8%AE%A1%E7%AE%97/18%20%E4%BA%91%E8%AE%A1%E7%AE%97%E7%9A%84%E6%96%B0%E6%96%B9%E5%90%91/</id>
    <published>2020-03-27T00:00:00.000Z</published>
    <updated>2020-04-01T18:29:40.713Z</updated>
    
    <content type="html"><![CDATA[<p>概述：</p><ol><li>回顾在物联网环境下，云计算的发展方向</li><li>为了阻止来自物联网的数据泛滥，在远程设备上采用智能本地数据处理成为关键：雾计算、边缘计算</li><li>本地数据处理中的虚拟化问题：以微服务和unikernels为例</li><li>工业4.0和智能工程</li></ol><a id="more"></a><h4 id="物联网家具：设备的发展前景"><a href="#物联网家具：设备的发展前景" class="headerlink" title="物联网家具：设备的发展前景"></a>物联网家具：设备的发展前景</h4><p>灯泡、冰箱、摄像头、手表、音响、显示器、扫地机器人等</p><h4 id="物联与智能产品：飞利浦照明"><a href="#物联与智能产品：飞利浦照明" class="headerlink" title="物联与智能产品：飞利浦照明"></a>物联与智能产品：飞利浦照明</h4><p>用户可以通过手机调节灯泡的亮度，调节开关；通过编程让它们：当发现进入者时闪烁，到晚上时变得昏暗</p><h3 id="雾计算"><a href="#雾计算" class="headerlink" title="雾计算"></a>雾计算</h3><h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>物联网应用和设备在持续激增，而旧的数据仓库模型：无法跟上物联网设备创建数据的速度和体积，也无法满足用户对低延迟响应时间的要求。但将数据发送到云上进行分析同样会带来风险：比如数据拥堵，安全问题等。网络数据传输的增长会导致数据拥堵的问题，而新的商业模型要求数据分析的时间少于1分钟（在某些情况下甚至要少与1秒）</p><h4 id="雾计算——思科架构"><a href="#雾计算——思科架构" class="headerlink" title="雾计算——思科架构"></a>雾计算——思科架构</h4><p><img src="https://tva1.sinaimg.cn/large/00831rSTgy1gdeq44w8ybj30tq0ca7cv.jpg" alt="截屏2020-04-01 下午5.18.16" style="zoom:50%;" /></p><p>雾平台：在网络边缘布置的密集型计算结构</p><p>特点：低延迟、位置感知、可通过无线访问使用</p><p>优点：实时分析、优化安全性</p><p>例子：</p><ol><li>智能交通信号灯系统，可基于当前的交通监控状况改变它的信号</li><li>数据可以发送到云端，用于长期分析</li></ol><p>在许多行业中，术语<u>边缘计算</u>和<u>雾计算</u>是可交互使用的，它们都涉及将<u>智能（计算处理数据的能力）</u>下发到离数据源更近的地方（泵、传感器、发动机、继电器），它们的根本区别在于<u>智能</u>到底安置在哪：</p><ul><li>雾：将<u>智能</u>发送到网络结构中的<u>局域网级别</u>，在雾节点或物联网网关中处理数据</li><li>边缘：将<u>智能、处理能力、通信能力</u>发送到边缘网关，或直接应用在设备本身（如可编程的自动化控制器 PACs）</li></ul><h3 id="边缘计算"><a href="#边缘计算" class="headerlink" title="边缘计算"></a>边缘计算</h3><p>在该结构中，数据可被处理，包括监控、分析、去重、缓存。</p><p>在该结构中，还需要考虑4个问题：1. 带宽，2. 网络能源，3.吞吐量，4. 数据存储；其他的开放新问题包括：</p><ol><li>便携性</li><li>能源效率</li><li>硬件结构的异构性</li><li>安全性虚</li><li>虚拟化</li></ol><p><img src="https://tva1.sinaimg.cn/large/00831rSTgy1gdeqp0e6pzj30no0ni7b8.jpg" alt="截屏2020-04-01 下午5.38.22" style="zoom:50%;" /></p><h4 id="1-可移动的边缘计算-Mobile-Edge-Computing-MEC"><a href="#1-可移动的边缘计算-Mobile-Edge-Computing-MEC" class="headerlink" title="1. 可移动的边缘计算 Mobile Edge Computing, MEC"></a>1. 可移动的边缘计算 Mobile Edge Computing, MEC</h4><p>在蜂窝网络或任何网络的边缘，启用云计算能力和通信技术服务环境的，一种网络结构。它的基本思想是与边缘计算和雾计算类似，即在接近蜂窝用户的地方运行程序和处理相关任务，从而缓解网络拥堵，提高性能。云不直接接收用户的数据，而是接收经过MEC节点处理后的少量数据。</p><p><img src="https://tva1.sinaimg.cn/large/00831rSTgy1gder2aip6dj30ts0l2dt4.jpg" alt="截屏2020-04-01 下午5.51.06" style="zoom:50%;" /></p><h4 id="2-低能耗计算案例"><a href="#2-低能耗计算案例" class="headerlink" title="2. 低能耗计算案例"></a>2. 低能耗计算案例</h4><p>该技术的关键在于如何使<u>本地处理数据的智能设备</u>使用最少的能源。目前，<u>低功耗和低能耗</u>仍然是物联网连接的智能对象的挑战。</p><p><u>性能</u>的表现由，除了速度之外的，非功能性部分组成，比如：能耗、可靠性、时间需求等</p><p>能源效率应该从三个方面考虑：</p><ol><li>系统级别：比如使用本地计算，而不是将数据传输到外部；通信是能源浪费的主要因素</li><li>设备级别：考虑到设备的异质性，使用在节能的结构</li><li>语言级别：避免数据通信，确保数据的本地性</li></ol><h4 id="3-硬件结构的异质性"><a href="#3-硬件结构的异质性" class="headerlink" title="3. 硬件结构的异质性"></a>3. 硬件结构的异质性</h4><p><u>异质的并行化结构</u>已经收到了相当大的关注，它的好处在于能够高效的运行程序和传递服务，并且在一个系统中组合了不同种类的处理器，从而优化了绝对性能和降低能耗</p><p>于是出现了新的平台，它们将多核CPUs、多核GPUs，和一系列的附加设备合并为一个单独的解决方案。它们的特点是高度的多样化，在混合的环境中操作，以及使用环境十分广泛（从超级计算机到个人智能手机）</p><h4 id="4-安全问题"><a href="#4-安全问题" class="headerlink" title="4.安全问题"></a>4.安全问题</h4><p>将物理网设备中的敏感数据（医疗数据、个人跟踪数据、视频、财务数据等）从数据源（家庭、企业等）中发送出去，可能会导致隐私泄露、声誉受损、数据盗窃等问题。除此之外还需要考虑传输成本，如带宽消耗、处理成本、存储成本。</p><p>解决方案应该专注于保护设备、网络和使用时的安全：物理层的安全性、设备保护、密码保险、泄露预防、基础设备的安全性、数据传输时的安全性、平台安全性</p><h4 id="5-虚拟化：以微服务为例"><a href="#5-虚拟化：以微服务为例" class="headerlink" title="5. 虚拟化：以微服务为例"></a>5. 虚拟化：以微服务为例</h4><p><img src="https://tva1.sinaimg.cn/large/00831rSTgy1gdes9a0hvfj30wq0g8acv.jpg" alt="截屏2020-04-01 下午6.32.26" style="zoom:50%;" /></p><p>微服务是一个结构模型，它以服务为粒度，将其拆分为多个分布的单元（小的服务），多个自治的服务相互合作，各个服务之间相互解耦，并且通过接口和协议（如HTTP）进行访问</p><h5 id="部署选项"><a href="#部署选项" class="headerlink" title="部署选项"></a>部署选项</h5><p>微服务可以是从<u>需要专用硬件</u>到<u>仅仅是软件包</u>。其中部署在容器上（如Docker）是在效率和管理方面都比较理想的选择（包含虚拟机的大部分优点，但比虚拟机的损耗更低）</p><p><img src="https://tva1.sinaimg.cn/large/00831rSTgy1gdesj02pl5j30eg0m2di1.jpg" alt="截屏2020-04-01 下午6.41.48" style="zoom:33%;" /></p><h5 id="以-Unikernels-独立核心为例"><a href="#以-Unikernels-独立核心为例" class="headerlink" title="以 Unikernels 独立核心为例"></a>以 <a href="http://dockone.io/article/855" target="_blank" rel="noopener">Unikernels</a> 独立核心为例</h5><p>Unikernel简单来说就是<strong>删除应用与硬件中间多余的部分，只保留运行程序所需的最小依赖的库和栈模块的操作系统镜像</strong>。</p><p>由于Unikernel只实现了传统操作系统中的最低限度功能，因此极度轻量，允许在日常硬件上实现高密度部署。Unikernel还可以运行自己的<u>服务</u>，这些服务在需求出现时诞生，并在需求消失后立即消失，其中一些短暂的<u>微服务</u>的寿命可能以秒为单位，甚至是几分之一秒。Unikernel是即时计算服务，仅在有工作要做时存在，因此可以最大限度地利用计算基础架构。</p><p>但是当应用和配置需要更新，我们需要重新编译你的源码来生成新的Unikernel并部署新版本。如果是新的安全升级，也同样需要重新编译和部署。</p><p><img src="https://tva1.sinaimg.cn/large/00831rSTgy1gdet1tpmvmj30tu0fggts.jpg" alt="截屏2020-04-01 下午6.59.54" style="zoom:50%;" /></p><h3 id="工业4-0"><a href="#工业4-0" class="headerlink" title="工业4.0"></a>工业4.0</h3><p>在工业4.0中，各个行业中的计算机和自动化将以全新的方式融合在一起，比如机器人远程连接到具备机器学习算法的计算机系统，而机器学习算法只需很少的人工操作即可学习和控制机器人。</p><p>工业4.0引入了<u>智能工厂</u>的概念，其中,<u>网络物理系统</u>监视工厂的物理上处理，并做出非中心化的决策</p><p>物理系统成为物联网，通过无线网络，实时地，在系统间相互通信，并与人类进行协作。</p><h4 id="工业4-0的六大设计原则"><a href="#工业4-0的六大设计原则" class="headerlink" title="工业4.0的六大设计原则"></a>工业4.0的六大设计原则</h4><ul><li><p>互操作性：<u>网络物理系统</u>（即工件载体，装配站和产品）、人类和智能工厂通过物联网相互连接和通信的能力</p></li><li><p>虚拟化：通过将传感器数据（来自监视物理上的处理过程）与虚拟工厂模型和仿真模型进行连接，以此创建的<u>智能工厂的虚拟副本</u></p></li><li><p>去中心化：智能工厂内的<u>网络物理系统</u>有自行决策的能力</p></li><li><p>实时功能：具有收集和分析数据并立即提供见解的能力</p></li><li><p>服务导向：通过<u>Internet of Services</u>提供（网络物理系统、人类和智能工厂的）服务</p></li><li><p>模块化：当对模块的需求发生改变时，智能工厂可以灵活地适应。</p></li></ul><h3 id="相关数据"><a href="#相关数据" class="headerlink" title="相关数据"></a>相关数据</h3><blockquote><p>pump——泵<br>motor——发动机<br>relay——继电器<br>energy efficient——节能<br>data-in-transit——传输中的数据<br>overhead——损耗<br>Cyber-Physical Systems —— 网络物理系统</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;概述：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;回顾在物联网环境下，云计算的发展方向&lt;/li&gt;
&lt;li&gt;为了阻止来自物联网的数据泛滥，在远程设备上采用智能本地数据处理成为关键：雾计算、边缘计算&lt;/li&gt;
&lt;li&gt;本地数据处理中的虚拟化问题：以微服务和unikernels为例&lt;/li&gt;
&lt;li&gt;工业4.0和智能工程&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="云计算" scheme="https://liaoooyx.com/categories/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
    
      <category term="IoT" scheme="https://liaoooyx.com/tags/IoT/"/>
    
      <category term="无处不在的云" scheme="https://liaoooyx.com/tags/%E6%97%A0%E5%A4%84%E4%B8%8D%E5%9C%A8%E7%9A%84%E4%BA%91/"/>
    
      <category term="雾计算" scheme="https://liaoooyx.com/tags/%E9%9B%BE%E8%AE%A1%E7%AE%97/"/>
    
      <category term="MEC" scheme="https://liaoooyx.com/tags/MEC/"/>
    
      <category term="微服务的虚拟化 unikernels" scheme="https://liaoooyx.com/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%9A%84%E8%99%9A%E6%8B%9F%E5%8C%96-unikernels/"/>
    
      <category term="工业4.0" scheme="https://liaoooyx.com/tags/%E5%B7%A5%E4%B8%9A4-0/"/>
    
  </entry>
  
  <entry>
    <title>用embedding vector表达时间线上的诊断记录</title>
    <link href="https://liaoooyx.com/2020/03/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/09%20%E7%BB%93%E6%9E%84%E5%8C%96%E6%95%B0%E6%8D%AE%E2%80%94%E2%80%94%E7%94%A8embedding%20vector%E8%A1%A8%E8%BE%BE%E6%97%B6%E9%97%B4%E7%BA%BF%E4%B8%8A%E7%9A%84%E8%AF%8A%E6%96%AD%E8%AE%B0%E5%BD%95/"/>
    <id>https://liaoooyx.com/2020/03/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/09%20%E7%BB%93%E6%9E%84%E5%8C%96%E6%95%B0%E6%8D%AE%E2%80%94%E2%80%94%E7%94%A8embedding%20vector%E8%A1%A8%E8%BE%BE%E6%97%B6%E9%97%B4%E7%BA%BF%E4%B8%8A%E7%9A%84%E8%AF%8A%E6%96%AD%E8%AE%B0%E5%BD%95/</id>
    <published>2020-03-25T00:00:00.000Z</published>
    <updated>2020-05-24T21:58:03.072Z</updated>
    
    <content type="html"><![CDATA[<p>（E. Choi, et al., “Medical Concept Representation Learning from Electronic Health Records and its Application on Heart Failure Prediction,” arXiv, 2016.）</p><p>该论文展示了如何用embedding vector表达<u>时间线上的诊断记录</u></p><p>并比较了应用在4中机器学习方法中的效果：</p><ul><li>Logistic Regression</li><li>Multilayer Perceptron (MLP) - uses two fully connected layers</li><li>Support Vector Machine (SVM)</li><li>K-Nearest Neighbours (KNN)</li></ul><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;（E. Choi, et al., “Medical Concept Representation Learning from Electronic Health Records and its Application on Heart Failure Prediction,” arXiv, 2016.）&lt;/p&gt;
&lt;p&gt;该论文展示了如何用embedding vector表达&lt;u&gt;时间线上的诊断记录&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;并比较了应用在4中机器学习方法中的效果：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Logistic Regression&lt;/li&gt;
&lt;li&gt;Multilayer Perceptron (MLP) - uses two fully connected layers&lt;/li&gt;
&lt;li&gt;Support Vector Machine (SVM)&lt;/li&gt;
&lt;li&gt;K-Nearest Neighbours (KNN)&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="人工智能" scheme="https://liaoooyx.com/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
      <category term="课件" scheme="https://liaoooyx.com/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E8%AF%BE%E4%BB%B6/"/>
    
    
      <category term="embedding vector" scheme="https://liaoooyx.com/tags/embedding-vector/"/>
    
  </entry>
  
</feed>
